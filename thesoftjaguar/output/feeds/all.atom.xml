<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The soft jaguar</title><link href="http://thesoftjaguar.com/" rel="alternate"></link><link href="http://thesoftjaguar.com/feeds/all.atom.xml" rel="self"></link><id>http://thesoftjaguar.com/</id><updated>2012-11-11T20:44:00+01:00</updated><entry><title>ApacheCon Europe 2012</title><link href="http://thesoftjaguar.com/apachecon-europe-2012.html" rel="alternate"></link><updated>2012-11-11T20:44:00+01:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-11-11:apachecon-europe-2012.html</id><summary type="html">&lt;p&gt;On Wednesday it was ApacheCon day, lot of interesting stuff regarding Apache Lucene, Solr and Elasticsearch. I am not an expert with search engines, and this is a good start for establishing the basic concepts and understanding how some people have solved search problems in their systems.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Captain Obvious strikes again" src="https://pbs.twimg.com/media/A7Fb2aPCAAAtQy2.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Compound Terms Query Parser for Great Shopping Experience&lt;/h2&gt;
&lt;p&gt;This &lt;a href="http://www.apachecon.eu/schedule/presentation/18/?utm_source=twitter&amp;amp;utm_medium=social&amp;amp;utm_content=79e580ba-95ca-43cb-9739-95693cf4770e"&gt;talk&lt;/a&gt; explained the problem of returning precise search results when there are tricky queries, based on &lt;a href="http://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;ved=0CCcQFjAA&amp;amp;url=http%3A%2F%2Flucene.sourceforge.net%2Fpapers%2Friao97.ps&amp;amp;ei=7O-fUPHRLYSh4gTA4IGQCA&amp;amp;usg=AFQjCNF3SmHeiPe-h1A48ztdx8Qx1R-r7w"&gt;Space Optimizations for Total Ranking&amp;lt;&lt;/a&gt; paper, and a match spotting using the info explained by the client and facet counts.&lt;/p&gt;
&lt;p&gt;However, there are some queries which are almost impossible to guess, like for example &lt;code&gt;red jeans&lt;/code&gt; in a search system which supports colors, you will have red clothes matches, matches with trademarks whose name contains &lt;code&gt;red&lt;/code&gt; or &lt;code&gt;jeans&lt;/code&gt;. You can minimize the problem, and of course the client only wants exact results, not a huge list of results that he is not going to check, but at the end a nice approach will be less guessing and more freedom to the client in his queries, for instance, specifying if he want to search by color or by trademark.&lt;/p&gt;
&lt;h2&gt;Choosing the right tool for your data analysis task - Apache Mahout in context&lt;/h2&gt;
&lt;p&gt;A nice &lt;a href="http://www.apachecon.eu/schedule/presentation/1/"&gt;explanation&lt;/a&gt; of the Apache Mahout project and use cases of what we can do with our huge load of data.&lt;/p&gt;
&lt;p&gt;A good example of this is the &lt;code&gt;Frequently Bought Together&lt;/code&gt; and &lt;code&gt;What Other Items Do Customers Buy After Viewing This Item?&lt;/code&gt; tags in an Amazon product page.&lt;/p&gt;
&lt;h2&gt;Big Search with Big Data Principles&lt;/h2&gt;
&lt;p&gt;Eric presented his &lt;a href="http://www.apachecon.eu/schedule/presentation/13/"&gt;problem&lt;/a&gt;, which consisted in millions of text documents that should be indexed, and they could have really strange formats.&lt;/p&gt;
&lt;p&gt;The solution was nice, applying technologies in which they were familiar with, and then he spoke about &lt;code&gt;Solr4&lt;/code&gt;. We should highlight that &lt;code&gt;Solr&lt;/code&gt; is becoming a noSQL database itself (&lt;code&gt;Elasticsearch&lt;/code&gt; as well), having a key/value store engine, and they used &lt;code&gt;.avro&lt;/code&gt; files for the cache, which was quite interesting.&lt;/p&gt;
&lt;p&gt;Other design choices were &lt;code&gt;ZooKeeper&lt;/code&gt; over &lt;code&gt;NFS&lt;/code&gt;, &lt;code&gt;SCP&lt;/code&gt;, etc.. for sending files between nodes (less error prone and more obvious reasons, &lt;code&gt;ZooKeeper&lt;/code&gt; is powerful), &lt;code&gt;Apache Tika&lt;/code&gt; as a pipeline, handling the errors with an error query, &lt;code&gt;Solrmeter&lt;/code&gt; for monitoring (the central monitoring using &lt;code&gt;Nagios&lt;/code&gt; with the &lt;code&gt;Solr&lt;/code&gt; plugin), a pooled environment (like for example 1 node for development, 6 for production and the rest for load testing) and a &lt;code&gt;Grim Reaper&lt;/code&gt; for restarting instances which are not working as expected.&lt;/p&gt;
&lt;p&gt;In addition, there were some problems which are still present, like the user queries analysis, done with Solrmeter or reading them in an excel file, and the cycle scavenging, which is being done with &lt;code&gt;Condor&lt;/code&gt; but not without complications.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hoffenheim Arena looks good at night" src="http://i.imgur.com/puR3H.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Solr 4: The SolrCloud Architecture&lt;/h2&gt;
&lt;p&gt;And it was the turn of &lt;a href="http://www.apachecon.eu/schedule/presentation/23/"&gt;showing&lt;/a&gt; how to hack a project that wasn't planned for distributed searching from the beggining, one of the biggest weaknesses in Solr.&lt;/p&gt;
&lt;p&gt;I want to highlight the use of &lt;code&gt;MurmurHash&lt;/code&gt; for assigning the documents to the different shards, &lt;code&gt;ZooKeeper&lt;/code&gt; again (in Elasticsearch this is definitely handled in a nicer way), &lt;code&gt;PeerSync&lt;/code&gt; for data replication and so on, and a last introduction to Netflix child: &lt;code&gt;Chaos Monkey&lt;/code&gt;, used for testing.&lt;/p&gt;
&lt;p&gt;SolrCloud hasn't convinced me, there are some problems when you want to scale the system, because there is a shard limit that you have to set at first, so &lt;code&gt;SolrCloud&lt;/code&gt; will assign a hash range to each shard. There are some hacks for allowing this, like the shard split (so the hash range will be reassigned). That's another problem that we have in Elasticsearch, but the shard arranging is automatic.&lt;/p&gt;
&lt;h2&gt;Personalized Search on the Largest Flash Site in America (Gilt)&lt;/h2&gt;
&lt;p&gt;Another talk regarding a &lt;a href="http://www.apachecon.eu/schedule/presentation/21/"&gt;problem&lt;/a&gt; and how a company has solved it.&lt;/p&gt;
&lt;p&gt;They were using Solr for getting only the items id (&lt;code&gt;skuId&lt;/code&gt; and &lt;code&gt;lookId&lt;/code&gt;), so Solr had only the index. Then, they enriched the search result asking the database for the rest of the params. For being able to do all of this, they created three own plugins for Solr, I didn't like this approach and in one case was a little hacky, but they know better about their own systems and at the end it was working as they expected it to work.&lt;/p&gt;
&lt;p&gt;Like with the first talk, we had the problem of the search query: the product data is not clean, it can have distractive descriptions, poorly named colors and misleading brand names. It was interesting how tricky can be the synonyms if your search engine supports this feature. At the end we have the same conclusion: maybe it is better if you leave that choice to the user for avoiding bad results.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Color names if you are a girl" src="https://pbs.twimg.com/media/A7G74L7CUAU6XLo.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Battle of the giants: Apache Solr 4.0 vs Elasticsearch&lt;/h2&gt;
&lt;p&gt;The last &lt;a href="http://www.apachecon.eu/schedule/presentation/24/"&gt;talk&lt;/a&gt; was the one in which I put more expectations, and it didn't convince me, maybe because I was hyped.&lt;/p&gt;
&lt;p&gt;It was a brief explanation of each system, which is not bad, but some query examples would have helped a lot. Elasticsearch seemed really promising with the prospective search, nested objects, moving shard and replicas, more indices storage options, index structure and not needing to reload the config. And that's what Solr doesn't have.&lt;/p&gt;
&lt;p&gt;There were also some features supported by both and well, Solr supports multilingual data handling, but is not enough. I really want to try both systems but right now, from the beginning, &lt;code&gt;Elasticsearch&lt;/code&gt; is more interesting for me, especially if I want to have a distributed search environment.&lt;/p&gt;</summary><category term="conference"></category><category term="talk"></category><category term="Apache"></category><category term="Elasticsearch"></category><category term="Solr"></category><category term="Lucene"></category></entry><entry><title>Useful Sublime packages</title><link href="http://thesoftjaguar.com/useful-sublime-packages.html" rel="alternate"></link><updated>2012-09-07T19:33:00+02:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-09-07:useful-sublime-packages.html</id><summary type="html">&lt;p&gt;I am a &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text Editor&lt;/a&gt; fan. Before it, I was using &lt;a href="http://macromates.com/"&gt;TextMate&lt;/a&gt; a lot but right now I am working in Linux environments too, so I decide to switch to Sublime because is available in all platforms, is not Java, and the plugin ecosystem is pretty atractive.&lt;/p&gt;
&lt;h2&gt;Introducing Sublime Package Control&lt;/h2&gt;
&lt;p&gt;Sublime has a lot of additional features if you install packages, but for being able to do it in a much more comfortable way, the &lt;a href="http://wbond.net/sublime_packages/package_control"&gt;Sublime Package Control&lt;/a&gt; is a great approach. And what is that? It is a full-featured package manager that helps you discovering, installing, updating and removing packages.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sublime Package Control" src="http://wbond.net/sublime_packages/img/package_control/command_palette.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Installing the Sublime Package Control&lt;/h2&gt;
&lt;p&gt;In Sublime, open the console (&lt;code&gt;Ctrl+`` or&lt;/code&gt;View&amp;gt;Show Console`) and paste the following snippet:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Package Control.sublime-package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ipp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sublime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;installed_packages_path&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyHandler&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://sublime.wbond.net/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%20&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Please restart Sublime Text to finish installation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command creates the Installed Packages folder for you (if necessary), and then downloads the &lt;code&gt;Package Control.sublime-package&lt;/code&gt; into it.&lt;/p&gt;
&lt;p&gt;Now, installing packages is really easy. Package Control is driven by the &lt;code&gt;Command Pallete&lt;/code&gt;. To open the pallete, press &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; (Windows, Linux) or &lt;code&gt;Cmd+Shift+P&lt;/code&gt; (OS X). All Package Control commands begin with &lt;code&gt;Package Control:&lt;/code&gt;, so start by typing &lt;code&gt;Package,&lt;/code&gt; so for installing a new package just type &lt;code&gt;Package Control:Install Package&lt;/code&gt; and type the name there. That's all!&lt;/p&gt;
&lt;h2&gt;Useful packages&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://github.com/squ1b3r/Djaneiro"&gt;Djaneiro&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Django support.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/SublimeText/EncodingHelper"&gt;EncodingHelper&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Provides the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attempts to guess encoding of files.&lt;/li&gt;
&lt;li&gt;Show encoding on status bar.&lt;/li&gt;
&lt;li&gt;Show when the current document is maybe broken because was opened with an incorrect encoding.&lt;/li&gt;
&lt;li&gt;Convert to UTF-8 from a variete of encodings organized in a menu.&lt;/li&gt;
&lt;li&gt;Convert to UTF-8 quickly from guessed encoding via menuitem.&lt;/li&gt;
&lt;li&gt;Convert to UTF-8 automatically when opening a file via some defined encodings found on User preferences.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/kemayo/sublime-text-2-git/wiki"&gt;Git&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Supports status, log viewing, diff viewing, blame, annotate, add files, commit and quick commit.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/ehamiter/ST2-GitHubinator"&gt;GitHubinator&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Allows you to select text in a Sublime Text 2 file, and see the highlighted lines on GitHub's remote repo, if one exists.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/dreadatour/Pep8Lint"&gt;Pep8Lint&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Checks Python files against some of the style conventions in PEP8.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/biermeester/"&gt;PylinterPylinter&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Allows automatic Python source code checking by Pylint. Pylint needs to be installed separately.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://wbond.net/sublime_packages/alignment"&gt;SublimeAlignment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dead-simple alignment of multi-line selections and multiple selections.  Align multiple selections to the same column by inserting spaces (or tabs) Align all lines in a multi-line selection to the same indent level Align the first = on each line of a multi-line selection to the same column.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/Kronuz/SublimeCodeIntel"&gt;SublimeCodeIntel&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code intelligence plugin ported from Open Komodo Editor to Sublime Text 2. Supports &lt;code&gt;PHP, Python, RHTML, JavaScript, Smarty, Mason, Node.js, XBL, Tcl, HTML, HTML5, TemplateToolkit, XUL, Django, Perl, Ruby, Python3&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Provides the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jump to Symbol Definition.&lt;/li&gt;
&lt;li&gt;Jump to the file and line of the definition of a symbol.&lt;/li&gt;
&lt;li&gt;Imports autocomplete.&lt;/li&gt;
&lt;li&gt;Shows autocomplete with the available modules/symbols in real time.&lt;/li&gt;
&lt;li&gt;Function Call tooltips.&lt;/li&gt;
&lt;li&gt;Displays information in the status bar about the working function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/welovewordpress/SublimeHtmlTidy"&gt;SublimeHtmlTidy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Allows you to clean and tidy up your HTML code.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/SublimeLinter/SublimeLinter"&gt;SublimeLinter&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Highlights lines of code the linter deems to contain (potential) errors. It also supports highlighting special annotations (for example: TODO) so that they can be quickly located.  Built in linters for the following languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;CoffeeScript&lt;/em&gt; - lint via coffee -s -l.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CSS&lt;/em&gt; - lint via built-in csslint.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Git Commit Messages&lt;/em&gt; - lint via built-in module based on A Note About Git Commit Messages.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Haml&lt;/em&gt; - lint via haml -c.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Java&lt;/em&gt; - lint via javac -Xlint.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Javascript&lt;/em&gt; - lint via built in jshint, jslint, or the closure linter (gjslint) (if installed).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Objective-J&lt;/em&gt; - lint via built-in capp_lint.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Perl&lt;/em&gt; - lint via Perl:Critic or syntax+deprecation checking via perl -c.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PHP&lt;/em&gt; - syntax checking via php -l.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Puppet&lt;/em&gt; - syntax checking via puppet parser validate.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt; - native, moderately-complete lint.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ruby&lt;/em&gt; - syntax checking via ruby -wc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/robcowie/SublimeTODO"&gt;SublimeTODO&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Extracts and lists TODO comments from open files and project folders.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/adzenith/WordHighlight"&gt;WordHighlight&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Highlights all copies of a word that's currently selected, or, optionally, highlights all copies of a word which currently has the insertion cursor upon it.&lt;/p&gt;
&lt;h2&gt;Themes&lt;/h2&gt;
&lt;p&gt;When installing a new package through the Package Control, there are some special ones named &lt;code&gt;Themes&lt;/code&gt;. They will change the look and feel of Sublime. Just search them in &lt;code&gt;Package Control:Install Packages&lt;/code&gt; with the string &lt;code&gt;Theme - ThemeName&lt;/code&gt;. For activating the theme just open the User Settings Preferences file (Sublime Text 2 -&amp;gt; Preferences -&amp;gt; Settings - User`) and add, append or update the theme entry like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;theme&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Soda Light.sublime-theme&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/buymeasoda/soda-theme/"&gt;Soda&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dark and light custom themes.&lt;/p&gt;</summary><category term="Sublime"></category><category term="editor"></category><category term="programming"></category><category term="plugins"></category><category term="packages"></category></entry><entry><title>Hackathon project: Jenkins is calling</title><link href="http://thesoftjaguar.com/jenkins-is-calling.html" rel="alternate"></link><updated>2012-09-04T18:59:00+02:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-09-04:jenkins-is-calling.html</id><summary type="html">&lt;h2&gt;What is a Hackathon?&lt;/h2&gt;
&lt;p&gt;In the company I work for, &lt;a href="http://www.edelight.de/"&gt;edelight&lt;/a&gt;, we have Hackathon days. The idea is to team up with colleagues and work on a project of your choice for one entire day. There are no limitations on what you want to do and at the end of the day you have to present a prototype to all the team. So the last Hackathon was in July and there were a lot of interesting projects, you can always check what is happening in our &lt;a href="http://labs.edelight-group.com/"&gt;team blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Having fun with Jenkins&lt;/h2&gt;
&lt;p&gt;We have a continuous integration server using &lt;a href="http://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt;, with a post-hook to our github repos for tracking the master branch on every project. It is really important for checking if the build is failing in the staging server, and it helps a lot in terms of code quality.&lt;/p&gt;
&lt;p&gt;In my case, I decided to create a really basic Android application, showing an annoying window with a silly background music whenever the Jenkins build is red (failing), or when is switching from the red state to blue (fixed).&lt;/p&gt;
&lt;h2&gt;A technical approach&lt;/h2&gt;
&lt;p&gt;In order to have an asynchronous communication, the Android application is implementing a &lt;a href="http://tools.ietf.org/html/rfc6455"&gt;WebSocket&lt;/a&gt; Java client, subscribed to a &lt;a href="http://www.tornadoweb.org/en/stable/"&gt;Tornado&lt;/a&gt; application that implements the WebSocket server. If you are a bit scared about Tornado, please don't, it is quite easy to create a &lt;a href="http://www.tornadoweb.org/en/stable/websocket.html?highlight=websockets"&gt;WebSocket server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Android app main view" src="http://i.imgur.com/SFpfb.png" /&gt;&lt;/p&gt;
&lt;h2&gt;The push notification&lt;/h2&gt;
&lt;p&gt;Once the client is subscribed, every time a Jenkins build is changing its status to &lt;code&gt;failing&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt;, the Tornado app will know it and will send a broadcast message (push message) to all the suscribers. In that case, the Android client (even if it is in sleeping mode), will populate the Activity window in front of all the ones that you had opened before, and an awesome music (copyright free of course) will be played.&lt;/p&gt;
&lt;h2&gt;The build is failing ¬¬&lt;/h2&gt;
&lt;p&gt;When a new commit is pushed into master, Jenkins runs the project tests, code coverage, pep8, pylint... If something is wrong, the build will fail. In that case, the mobile phone will display the TROLOLO window, with the &lt;a href="http://youtu.be/ednKK8GlvwI"&gt;TROLOLO song&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The build is fixed ^^&lt;/h2&gt;
&lt;p&gt;Of course, if the build is failing, someone has to fix it. If a benevolent soul has commited the patch fix into master, Jenkins will pass all the tests again, and it will stop spamming our email accounts. The way in which it stops the spam is quite funny: sending a last email message saying that it is fixed.&lt;/p&gt;
&lt;p&gt;However, I thought that the spam wasn't enough, so in that case, your mobile phone will also display the KEYBOARD CAT window, and the &lt;a href="http://youtu.be/J---aiyznGQ"&gt;KEYBOARD CAT song&lt;/a&gt; as a token of victory.&lt;/p&gt;
&lt;h2&gt;Life's for sharing&lt;/h2&gt;
&lt;p&gt;You can browse the code on &lt;a href="https://github.com/sharkerz/jenkins-calling"&gt;github&lt;/a&gt;. I haven't had a lot of time for developing this, so I haven't cleaned the code a lot (and I'm sharing the client only), but if someone is really interested in it, you can always ping me in twitter or by email.&lt;/p&gt;</summary><category term="hackathon"></category><category term="Jenkins"></category><category term="continuous integration"></category><category term="Android"></category><category term="Java"></category><category term="Websocket"></category><category term="asynchronous"></category><category term="Tornado"></category></entry><entry><title>Django regroup template tag</title><link href="http://thesoftjaguar.com/django-regroup-tag.html" rel="alternate"></link><updated>2012-05-27T18:53:00+02:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-05-27:django-regroup-tag.html</id><summary type="html">&lt;p&gt;It is a common problem, the case in which we have a huge dictionary, with several fields with repeated data among those dictionary entries. Printing the dictionary, entry by entry, is going to show those repeated field values, and sometimes is not really cool. For a better visualization, we can think that is better to group the entries with the same field value, and we don't know how to do it in the template side.&lt;/p&gt;
&lt;h2&gt;We can do more in the template&lt;/h2&gt;
&lt;p&gt;What is the regroup template tag? It will helps us to loop through a data structure, grouping each entry by a desired field, or maybe we want to group more than once.&lt;/p&gt;
&lt;p&gt;It is a bit tricky to understand this issue so let's put an example. For instance, we have a &lt;code&gt;gps&lt;/code&gt; points list where each of it has &lt;code&gt;latitude&lt;/code&gt;, &lt;code&gt;longitude&lt;/code&gt; and a &lt;code&gt;date&lt;/code&gt;. The date is a &lt;code&gt;datetime&lt;/code&gt; object (let's think about it like &lt;code&gt;year + month +  day&lt;/code&gt;, though it has an hour and the representation of that object is a bit different). Then, we want to organize those points by &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, we will have a link per &lt;code&gt;day&lt;/code&gt; to another page, showing with detail all the gps points for that specific day. Those days are grouped by months, and the months by years. Both months and years values will redirect to a page filtering the entries.&lt;/p&gt;
&lt;p&gt;A possible approach to this problem would be the following piece of code (arranged in a table), where &lt;code&gt;points&lt;/code&gt; is the variable list provided by the view:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;regroup&lt;/span&gt; &lt;span class="nv"&gt;points&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;Y&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;points_by_year&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;entry-content&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;year_points&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;points_by_year&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;caption&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;year_points.grouper&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;caption&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;regroup&lt;/span&gt; &lt;span class="nv"&gt;year_points.list&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;M&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;points_by_month&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;month_points&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;points_by_month&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;month_points.grouper&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;regroup&lt;/span&gt; &lt;span class="nv"&gt;month_points.list&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;points_by_day&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;day_points&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;points_by_day&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="nv"&gt;nextpage_name&lt;/span&gt; &lt;span class="nv"&gt;year_points.grouper&lt;/span&gt; &lt;span class="nv"&gt;month_points.grouper&lt;/span&gt; &lt;span class="nv"&gt;day_points.grouper&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;day_points.grouper&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;grouper&lt;/code&gt; variable will show the string of the item that was grouped by, and if it was by year, then it is the year value, because we have filtered it like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;regroup&lt;/span&gt; &lt;span class="nv"&gt;points&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;Y&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;points_by_year&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the following piece of code is another way of creating the url for the next page. We need to specify the &lt;code&gt;nextpage_name&lt;/code&gt; in &lt;code&gt;urls.py&lt;/code&gt; and the other two strings are the arguments, so the server will know what page to show.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="nv"&gt;nextpage_name&lt;/span&gt; &lt;span class="nv"&gt;year_points.grouper&lt;/span&gt; &lt;span class="nv"&gt;month_points.grouper&lt;/span&gt; &lt;span class="nv"&gt;day_points.grouper&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Let's see how it looks&lt;/h2&gt;
&lt;p&gt;The result should be something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Regrouping tag overview" src="http://i.imgur.com/fILp6.png" /&gt;&lt;/p&gt;
&lt;p&gt;We don't really need the &lt;code&gt;latitude&lt;/code&gt; and &lt;code&gt;longitude&lt;/code&gt; here, but we need to know that we have X points for a specific day, to show only the involved days. We can create a set of tables where each table is a single year. At the end, it is very simple and there are other solutions, but this is one of them, using the powerful Django regroup template tag. You can browse more information about these tags in the &lt;a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs"&gt;Django Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Other template languages&lt;/h2&gt;
&lt;p&gt;This guide can be applied to other template languages like &lt;code&gt;Jinja2&lt;/code&gt;. There is a great explanation in the &lt;a href="http://jinja.pocoo.org/docs/templates/#groupby"&gt;Jinja2 Documentation&lt;/a&gt;, and is pretty similar to the &lt;code&gt;Django&lt;/code&gt; approach.&lt;/p&gt;</summary><category term="django"></category><category term="template"></category><category term="python"></category><category term="web development"></category></entry><entry><title>Deploying applications with git</title><link href="http://thesoftjaguar.com/deploying-applications-with-git.html" rel="alternate"></link><updated>2012-02-29T16:33:00+01:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-02-29:deploying-applications-with-git.html</id><summary type="html">&lt;p&gt;Usually, when we work with an application, especially with web applications, we wonder what is the best way for deploying it, and there are many. It is really important to be comfortable with the way in which we deploy these kind of applications, because the productivity is going to be strongly related to it. Here I explain some &lt;code&gt;git&lt;/code&gt; basics, and how to easily configure it for updating automatically a specific folder (for instance, the web root folder) with the last pushed revision.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git trunk" src="http://thekevindolan.com/wp-content/uploads/2010/03/git_two1-600x480.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Understanding the basics&lt;/h2&gt;
&lt;p&gt;Instead of copypaste the web app local content, or work directly on the server, we will have a distributed version control system like &lt;code&gt;git&lt;/code&gt; to check every local changes (even if we want to work individually), with all the functionality that it provides. Therefore, every time a commit is made, it will not be in the remote server until we do the appropiate push. If you want to know more about &lt;code&gt;git&lt;/code&gt; I recommend the following &lt;a href="http://rogerdudler.github.com/git-guide/&amp;quot;%20target=&amp;quot;_self"&gt;cheatsheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, if we want to create a local repository (although it doesn't matter, it could be an existing one), we will write the following commands:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkdir webapp&lt;/p&gt;
&lt;p&gt;$ cd webapp&lt;/p&gt;
&lt;p&gt;$ git init&lt;/p&gt;
&lt;p&gt;Initialized empty Git repository in /home/user/webapp/.git/&lt;/p&gt;
&lt;p&gt;$ touch index.html&lt;/p&gt;
&lt;p&gt;$ git add index.html&lt;/p&gt;
&lt;p&gt;$ git commit -m "First commit"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The bare and non-bare differentiation&lt;/h2&gt;
&lt;p&gt;Now we have a local &lt;code&gt;git&lt;/code&gt; repository, but... What about the server? I'll try to be as generic as possible regarding the creation of the repository. In addition, I have to highlight the difference in &lt;code&gt;git&lt;/code&gt; between bare repositories and non-bare repositories.&lt;/p&gt;
&lt;p&gt;The bare repositories only have version control files and not work files (tree), also they don't include the special directory .git. Instead, it includes all of its content directly in the root of the bare repository. They are used to have a central repository where the developers can do pull and push: it is a correct way of doing this.&lt;/p&gt;
&lt;p&gt;The non-bare repositories have a special folder &lt;code&gt;.git&lt;/code&gt; which has the control version system information, and the work files: the tree. The local repository which we have created is non-bare.&lt;/p&gt;
&lt;h2&gt;Working in the server&lt;/h2&gt;
&lt;p&gt;Therefore, the idea is to create a bare repository in the server, such that when it receives a push, it will upgrade the web app directory (the folder that we want, for instance, avoiding the change of other management folders, such as the one which contains apache server scripts). This repository will be a mirror from the local one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkdir webapp.git&lt;/p&gt;
&lt;p&gt;$ cd webapp.git&lt;/p&gt;
&lt;p&gt;$ git init --bare&lt;/p&gt;
&lt;p&gt;Initialized empty Git repository in /home/user/webapp.git/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The post-hook creation&lt;/h2&gt;
&lt;p&gt;We need to tell &lt;code&gt;git&lt;/code&gt; to apply the changes in the desired folder, so we must define a post-hook who will apply the changes when the remote repository receives a push, doing a check-out of the last tree in the desired folder. Editing the post-receive file (in the &amp;quot;hook&amp;quot; folder from the bare repository) will do the trick:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GIT_WORK_TREE=/home/user/target_dir git checkout -f&lt;/p&gt;
&lt;p&gt;GIT_WORK_TREE=/home/user/target_dir git reset --hard&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If it was a Django project, we would have defined the project folder (the one with settings.py in it). Otherwise it could have been the &lt;code&gt;/var/www/example_webapp&lt;/code&gt; folder, etc. We have to give execute permissions to the post-receive file (for example with the command &lt;code&gt;chmod +x hooks/post-receive&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Finishing the local set up&lt;/h2&gt;
&lt;p&gt;Back in the local repository, it will be necessary to define the remote repository name (the mirror) and create a master branch in it. For example, we will call the branch &amp;quot;web&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git remote add web username@domain.com:webapp.git&lt;/p&gt;
&lt;p&gt;git push web +master:refs/heads/master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will have the &lt;code&gt;index.html&lt;/code&gt; dummy file in the desired server folder. From now on, changes are made with the following command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git push web&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The small inconvenience of setting up this, is worth the time.&lt;/p&gt;</summary><category term="Git"></category><category term="deployment"></category><category term="bare"></category><category term="non-bare"></category><category term="version control"></category></entry></feed>