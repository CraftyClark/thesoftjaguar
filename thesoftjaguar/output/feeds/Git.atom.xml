<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The soft jaguar</title><link href="http://thesoftjaguar.com/" rel="alternate"></link><link href="http://thesoftjaguar.com/feeds/git.atom.xml" rel="self"></link><id>http://thesoftjaguar.com/</id><updated>2013-04-06T02:24:00+02:00</updated><entry><title>Migrating to a Pelican static blog</title><link href="http://thesoftjaguar.com/posts/2013/04/06/pelican-static-blog/" rel="alternate"></link><updated>2013-04-06T02:24:00+02:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2013-04-06:posts/2013/04/06/pelican-static-blog/</id><summary type="html">&lt;p&gt;In October 2011, as a Django training exercise, I decided to develop a blog engine from scratch, and I called it &lt;a href="https://github.com/sharkerz/blogjaguar"&gt;blogjaguar&lt;/a&gt;. It was quite interesting and I had a lot of fun in the process, but it wasn't easy and updating it required a lot of time, even if the web framework was making the things easier. That's why I have decided to drop its support, and migrate to a static blog, integrating it with a basic bootstrap webpage that I had for my personal portfolio.&lt;/p&gt;
&lt;h2&gt;The static blog concept&lt;/h2&gt;
&lt;p&gt;Instead of having a server side application which is going to parse the client request given by the web server, compile a template based on the given data (this step can be avoided sometimes with a cache system), and return it as an HTML page, we simply skip the first two steps, serving the static HTML page directly, without any programming language as a proxy.&lt;/p&gt;
&lt;p&gt;And there are many questions... How? We don't really need an admin interface for writing a blog post: we can do it directly creating another HTML page. We don't need our own comment system, we can include an external one like &lt;em&gt;Disqus&lt;/em&gt;. We don't need to register users in our page, they don't want to register in a blog. There are many tasks that we can do without creating the HTML pages dynamically.&lt;/p&gt;
&lt;p&gt;Fine, now you are thinking that this is a mess, why should you be editting the HTML pages every time you want to create a new blog entry? It seems easier with an administration panel and a WYSWYG editor. And that's why we have static blog generators. &lt;/p&gt;
&lt;h2&gt;The static blog generator&lt;/h2&gt;
&lt;p&gt;There are many static blog generators, and they provide a really interesting set of features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Speed: the parse is made once locally, and then the static pages are uploaded to the web root, ready to be served.&lt;/li&gt;
&lt;li&gt;Portability: your source blog pages are going to be written in a markup language like Markdown, Textile or Restructured Text, so we don't care about the design, and can be reused in other static blog engines, or even in other systems.&lt;/li&gt;
&lt;li&gt;Security: it is the strongest point, everything is static, no server side code, no headaches.&lt;/li&gt;
&lt;li&gt;Configurability: they usually have a configuration file, and you can create your own themes in a really easy way, using different template languages.&lt;/li&gt;
&lt;li&gt;Power: &lt;em&gt;git&lt;/em&gt; power can be applied to the static blogs, tracking the changes in each blog post and using post-hooks for deploying both in &lt;em&gt;github&lt;/em&gt; or in another web server. Forget about WYSWYG and complex admin interfaces: just use markup language, your favorite text editor and your preferred version control system, and you will be happy.&lt;/li&gt;
&lt;li&gt;Cheap: you actually don't need expensive hosting, you can upload your static content to &lt;em&gt;github&lt;/em&gt; and it will serve it for you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Maybe the most famous static blog generator is &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt; (Ruby), but I have enough Ruby when I program with Chef, so I wanted a Python alternative. I tried two: &lt;a href="http://nikola.ralsina.com.ar/"&gt;Nikola&lt;/a&gt; and &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My colleague &lt;a href="http://ventolin.org/"&gt;Aengus Walton&lt;/a&gt; has been migrating his Wordpress blog to a static blog philosophy, and for that purpose he recommends Nikola over Pelican, it seems that Nikola handles Wordpress in a better way. I have to say that Nikola is a great alternative, but in my specific case, I decided to use Pelican for this purpose.&lt;/p&gt;
&lt;h2&gt;Why Pelican&lt;/h2&gt;
&lt;h2&gt;The process&lt;/h2&gt;
&lt;h3&gt;Initializiting the project&lt;/h3&gt;
&lt;h3&gt;Defining Pelican settings&lt;/h3&gt;
&lt;h3&gt;Creating your own template&lt;/h3&gt;
&lt;h3&gt;Writing your first article&lt;/h3&gt;
&lt;h3&gt;Parsing the html&lt;/h3&gt;
&lt;h3&gt;Deploying to your web server&lt;/h3&gt;</summary><category term="static-blog"></category><category term="markdown"></category><category term="pelican"></category><category term="python"></category><category term="web-development"></category><category term="git"></category><category term="django"></category></entry><entry><title>Deploying applications with git</title><link href="http://thesoftjaguar.com/posts/2012/02/29/deploying-applications-with-git/" rel="alternate"></link><updated>2012-02-29T16:33:00+01:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-02-29:posts/2012/02/29/deploying-applications-with-git/</id><summary type="html">&lt;p&gt;Usually, when we work with an application, especially with web applications, we wonder what is the best way for deploying it, and there are many. It is really important to be comfortable with the way in which we deploy these kind of applications, because the productivity is going to be strongly related to it. Here I explain some &lt;code&gt;git&lt;/code&gt; basics, and how to easily configure it for updating automatically a specific folder (for instance, the web root folder) with the last pushed revision.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git trunk" src="http://thekevindolan.com/wp-content/uploads/2010/03/git_two1-600x480.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Understanding the basics&lt;/h2&gt;
&lt;p&gt;Instead of copypaste the web app local content, or work directly on the server, we will have a distributed version control system like &lt;code&gt;git&lt;/code&gt; to check every local changes (even if we want to work individually), with all the functionality that it provides. Therefore, every time a commit is made, it will not be in the remote server until we do the appropiate push. If you want to know more about &lt;code&gt;git&lt;/code&gt; I recommend the following &lt;a href="http://rogerdudler.github.com/git-guide/&amp;quot;%20target=&amp;quot;_self"&gt;cheatsheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, if we want to create a local repository (although it doesn't matter, it could be an existing one), we will write the following commands:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkdir webapp&lt;/p&gt;
&lt;p&gt;$ cd webapp&lt;/p&gt;
&lt;p&gt;$ git init&lt;/p&gt;
&lt;p&gt;Initialized empty Git repository in /home/user/webapp/.git/&lt;/p&gt;
&lt;p&gt;$ touch index.html&lt;/p&gt;
&lt;p&gt;$ git add index.html&lt;/p&gt;
&lt;p&gt;$ git commit -m "First commit"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The bare and non-bare differentiation&lt;/h2&gt;
&lt;p&gt;Now we have a local &lt;code&gt;git&lt;/code&gt; repository, but... What about the server? I'll try to be as generic as possible regarding the creation of the repository. In addition, I have to highlight the difference in &lt;code&gt;git&lt;/code&gt; between bare repositories and non-bare repositories.&lt;/p&gt;
&lt;p&gt;The bare repositories only have version control files and not work files (tree), also they don't include the special directory .git. Instead, it includes all of its content directly in the root of the bare repository. They are used to have a central repository where the developers can do pull and push: it is a correct way of doing this.&lt;/p&gt;
&lt;p&gt;The non-bare repositories have a special folder &lt;code&gt;.git&lt;/code&gt; which has the control version system information, and the work files: the tree. The local repository which we have created is non-bare.&lt;/p&gt;
&lt;h2&gt;Working in the server&lt;/h2&gt;
&lt;p&gt;Therefore, the idea is to create a bare repository in the server, such that when it receives a push, it will upgrade the web app directory (the folder that we want, for instance, avoiding the change of other management folders, such as the one which contains apache server scripts). This repository will be a mirror from the local one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkdir webapp.git&lt;/p&gt;
&lt;p&gt;$ cd webapp.git&lt;/p&gt;
&lt;p&gt;$ git init --bare&lt;/p&gt;
&lt;p&gt;Initialized empty Git repository in /home/user/webapp.git/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The post-hook creation&lt;/h2&gt;
&lt;p&gt;We need to tell &lt;code&gt;git&lt;/code&gt; to apply the changes in the desired folder, so we must define a post-hook who will apply the changes when the remote repository receives a push, doing a check-out of the last tree in the desired folder. Editing the post-receive file (in the &amp;quot;hook&amp;quot; folder from the bare repository) will do the trick:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GIT_WORK_TREE=/home/user/target_dir git checkout -f&lt;/p&gt;
&lt;p&gt;GIT_WORK_TREE=/home/user/target_dir git reset --hard&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If it was a Django project, we would have defined the project folder (the one with settings.py in it). Otherwise it could have been the &lt;code&gt;/var/www/example_webapp&lt;/code&gt; folder, etc. We have to give execute permissions to the post-receive file (for example with the command &lt;code&gt;chmod +x hooks/post-receive&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Finishing the local set up&lt;/h2&gt;
&lt;p&gt;Back in the local repository, it will be necessary to define the remote repository name (the mirror) and create a master branch in it. For example, we will call the branch &amp;quot;web&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git remote add web username@domain.com:webapp.git&lt;/p&gt;
&lt;p&gt;git push web +master:refs/heads/master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will have the &lt;code&gt;index.html&lt;/code&gt; dummy file in the desired server folder. From now on, changes are made with the following command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git push web&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The small inconvenience of setting up this, is worth the time.&lt;/p&gt;</summary><category term="git"></category><category term="deployment"></category><category term="version-control"></category></entry></feed>