<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The soft jaguar</title><link href="http://thesoftjaguar.com/" rel="alternate"></link><link href="http://thesoftjaguar.com/feeds/all-en.atom.xml" rel="self"></link><id>http://thesoftjaguar.com/</id><updated>2013-07-30T09:51:00+02:00</updated><entry><title>Berlin Buzzwords 2013</title><link href="http://thesoftjaguar.com/posts/2013/07/30/berlin-buzzwords-2013/" rel="alternate"></link><updated>2013-07-30T09:51:00+02:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2013-07-30:posts/2013/07/30/berlin-buzzwords-2013/</id><summary type="html">&lt;p&gt;Berlin Buzzwords is another of those events that I like to attend, it took place on June 3rd and 4th at &lt;a href="http://kulturbrauerei.de/en"&gt;Kulturbrauerei&lt;/a&gt;, which is an awesome place.&lt;/p&gt;
&lt;p&gt;Buzzwords is a conference focused in Open Source technologies, mainly related to search engines, big data and NoSQL databases, having three main topics: &lt;code&gt;search&lt;/code&gt;, &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt;. The main technologies from the talks that I attended were &lt;a href="http://www.elasticsearch.org/"&gt;Elasticsearch&lt;/a&gt;, &lt;a href="http://lucene.apache.org/solr/"&gt;Solr&lt;/a&gt; &lt;a href="http://cassandra.apache.org/"&gt;Cassandra&lt;/a&gt;, &lt;a href="http://hadoop.apache.org/"&gt;Hadoop&lt;/a&gt;, &lt;a href="http://pig.apache.org/"&gt;Pig&lt;/a&gt;, &lt;img alt="Mahout" src="http://mahout.apache.org/" /&gt;, &lt;a href="http://fitnesse.org/"&gt;FitNesse&lt;/a&gt;, &lt;a href="http://www.mongodb.org/"&gt;MongoDB&lt;/a&gt;, &lt;a href="http://logstash.net/"&gt;Logstash&lt;/a&gt; and &lt;a href="http://kibana.org/"&gt;Kibana&lt;/a&gt;, among others.&lt;/p&gt;
&lt;p&gt;Instead of explaining what was going on in each talk that I attended, I have decided to cover the three main areas of the conference.&lt;/p&gt;
&lt;h1&gt;Search&lt;/h1&gt;
&lt;p&gt;This topic covers several search engines, mainly &lt;code&gt;Elasticsearch&lt;/code&gt;, but also &lt;code&gt;Solr&lt;/code&gt; (and of course &lt;code&gt;Lucene&lt;/code&gt; as the base), which are quite famous. But it also wraps how to analyze a lot of log information (or just a lot of data). I mainly attended Elasticsearch's talks, but there were more technologies involved.&lt;/p&gt;
&lt;h2&gt;Just search&lt;/h2&gt;
&lt;p&gt;So we want to get started with a search engine, but... How do we use them? &lt;a href="http://berlinbuzzwords.de/sessions/getting-down-and-dirty-elasticsearch"&gt;Getting down and dirty with Elasticsearch&lt;/a&gt; starts from the basic concepts and explains how to improve our queries (which, IMHO, is the most interesting part of this talk). It differences exact values search (should match &lt;strong&gt;entirely&lt;/strong&gt;) from full text search (search within the text), it introduces the &lt;em&gt;inverted index&lt;/em&gt; concept for improving full text search, which is being done separating words and terms, sorting unique terms and listing docs containing those terms, via the use of &lt;strong&gt;analyzers&lt;/strong&gt;. The exact matching is done (or should be done) with &lt;strong&gt;filters&lt;/strong&gt;, and the text search is achieved with &lt;strong&gt;queries&lt;/strong&gt;, so the filters are faster than the queries and cacheable, but the queries provide the full text search. Finally, the talk addresses some different ways of implementing &lt;strong&gt;autocomplete&lt;/strong&gt;: the &lt;em&gt;N-grams&lt;/em&gt; method, good for partial word matching, and the &lt;em&gt;Edge N-grams&lt;/em&gt; method, perfect for autocomplete (just activating the type &lt;code&gt;edge_ngram&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;analyzers&lt;/strong&gt; is a very interesting topic, helping us to deal with different languages at query time. &lt;a href="http://berlinbuzzwords.de/sessions/language-support-and-linguistics-lucenesolrelasticsearch-and-open-source-and-commercial-eco"&gt;Language Support and Linguistics in Lucene/Solr/Elasticsearch and the open source ecosystem&lt;/a&gt; explains again the tokenization and normalization of the given text query, where the tokens are mapped to the document ids that contain them. However, we will find the &lt;a href="http://en.wikipedia.org/wiki/Precision_and_recall"&gt;precision and recall&lt;/a&gt; problem. The talk explains how Lucene, Elasticsearch and Solr deals with this, and how the synonyms can improve the recall. About the latter, the best practice is to apply the synonyms in the query side instead of in the index: it allows synonym updating without reindexing and is easier to turn the synonym feature off.&lt;/p&gt;
&lt;p&gt;When we work with NoSQL based solutions, in this case with Elasticsearch, we always have a problem: how to divide the relational data? &lt;a href="http://berlinbuzzwords.de/sessions/document-relations-elasticsearch"&gt;Document relations with Elasticsearch&lt;/a&gt; gives two answers to this problem. The first one is about setting the &lt;code&gt;_parent&lt;/code&gt; field in the desired mapping, for linking the current document (child) to another one (parent). The advantage is that the parent document doesn't need to exist at indexing time, which improves the performance, and if we want to have the parent documents based on matches with their child ones, we can always set the &lt;code&gt;has_child&lt;/code&gt; query. The second workaround is the use of &lt;strong&gt;nested objects&lt;/strong&gt;. We can set a JSON document with nested fields, instead of defining a parent, using the &lt;code&gt;nested&lt;/code&gt; field type (which triggers Lucene's &lt;em&gt;block indexing&lt;/em&gt;). This document will be flattened and the &lt;em&gt;block indexing&lt;/em&gt; translate the ES document into multiple Lucene documents. With this approach, the root document and its nested documents remain always in the same block, and when querying, you establish it as a nested query, specify the nested level, the score mode and then the query inside that nested document.&lt;/p&gt;
&lt;h2&gt;Test driven development in Big Data&lt;/h2&gt;
&lt;p&gt;The search topic is also closely related to Big Data. What's the point of having tons and tons of data if we can't find anything useful there? Big Data solutions usually are complex and not easy to test. &lt;a href="http://berlinbuzzwords.de/sessions/bug-bites-elephant-test-driven-quality-assurance-big-data-application-development"&gt;Bug bites Elephant?&lt;/a&gt; presents a way of assuring quality data following the Test-driven development process, specifically when using Hadoop, Pig and/or Hive. There are several ways of achieving this (JUnit, MRUnit, iTest or simply using scripts), but the talk introduces FitNesse as a natural language test specification, where the tests are written as stories instead as programming code. The FitNesse server translates the natural language into Java and integrates with REST or Jenkins if needed. This has several advantages, like having a wiki page with the tests written in a language that everyone can understand (or integrate PigLatin directly into that wiki page). However, natural language has its limits, like for instance, if you want to check the expected result (like the output of a Pig job alias).&lt;/p&gt;
&lt;h2&gt;Don't drown in a log ocean&lt;/h2&gt;
&lt;p&gt;Who hasn't had issues when dealing with log information? We want to know what's going on when something is wrong, but sometimes the log is too verbose (Java :P) or simply we have the log files distributed among a lot of servers. &lt;a href="http://berlinbuzzwords.de/sessions/state-open-source-logging"&gt;The State of Open Source Logging&lt;/a&gt; shows some technologies that address this problem, like fluentd, Logstash, Graylog2, ELSA, Flume or Scribe. Therefore, one work around to this problem is to centralize all log files into a Elasticsearch cluster, transforming every log line into a JSON document. The talk is focused on the &lt;strong&gt;Kibana&lt;/strong&gt; way, which is a very powerful Logstash and Elasticsearch interface.&lt;/p&gt;
&lt;h2&gt;Machine learning baby&lt;/h2&gt;
&lt;p&gt;Imagine that we have access to a lot of data, and actually we can (Twitter Public API). Now we want to do something useful with that data, like in &lt;a href="http://berlinbuzzwords.de/sessions/geospatial-event-detection-twitter-stream"&gt;Geospatial Event Detection in the Twitter Stream&lt;/a&gt;, a nice talk stating the desire of creating real actionable insights from tweet data: fires, police alerts, events, demonstrations, accidents...&lt;/p&gt;
&lt;p&gt;In order to detect those events, they grouped the tweets by location (tweet cluster) storing them in MongoDB, and then, check if the tweets from the cluster belong to the same topic (marking the group as good). Where is the machine learning? Well, marking the tweet cluster as good is not a trivial thing: the use of a machine learning tool (like Weka) can solve the problem.&lt;/p&gt;
&lt;p&gt;The machine learning tool will then make a choice (is the cluster good or bad?) based on a series of user defined rules. In this specific case, it was checking if the tweets had a common theme (n-gram overlap), sentiment (was it positive, negative? Which was the overall sentiment? What would be the sentiment strenght?), subjectivity, number of hashtags, retweet ratio, event categories, embedded links, foursquare tweets (or other kind of predefined tweets), total number of tweets in the cluster, unique locations, bad locations (airports, train stations...), among other parameters. This highlights the relevance of having an important number of quality rules, besides the tool used for performing machine learning.&lt;/p&gt;
&lt;h1&gt;Store&lt;/h1&gt;
&lt;h2&gt;Cassandra in da house&lt;/h2&gt;
&lt;p&gt;I didn't assist a lot of &lt;code&gt;Store&lt;/code&gt; talks, it was mainly about Cassandra, topic in which I am not too familiar with. &lt;img alt="On Cassandra's Evolution" src="http://berlinbuzzwords.de/sessions/cassandras-evolutions" /&gt; gave a brief explanation about Casandra's ring of nodes, remarking the difference between data distribution without and with virtual nodes. If we introduce the concept of &lt;code&gt;token&lt;/code&gt;, which belongs to a data range, so the entire data will be divided in tokens, the data distribution with virtual nodes will use more tokens per node, and smaller ones. Other concepts were explained, like repairing with and without virtual nodes, but at the end, the use of virtual nodes was more interesting: you can pick tokens from pretty much every node in the ring, instead of from some nodes of your entire cluster (this is due to the fact that the tokens are smaller), so if you have a lot of data to transfer because you are rebuilding a node, this can make the difference. There are other advantages, they allow heterogeneous nodes and the load balancing is simpler when adding new nodes.&lt;/p&gt;
&lt;p&gt;Another interesting part was the introduction to the &lt;strong&gt;Cassandra Query Language&lt;/strong&gt; (CQL3). Is kind of a "denormalized" SQL, strictly real time oriented, with no joins, no sub-queries, no aggregation and a limited ORDER BY. They also announced the replace of the Thrift transport protocol for a binary (native) one, which is asynchronous, gives server notifications for new nodes and schema changes, and is totally optimized for CQL3. Another interesting concept is the request tracing, you can trace queries, for instance, seeing which node receives the query and which nodes has the requires replicas, making debugging easier for tracing anti patterns. In &lt;img alt="Cassandra by Example" src="http://berlinbuzzwords.de/sessions/cassandra-example-data-modeling-cql3" /&gt; they extend these concepts using a Django example application called &lt;a href="https://github.com/twissandra/twissandra"&gt;Twissandra&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Scale&lt;/h1&gt;
&lt;p&gt;The most relevant talk about &lt;code&gt;scale&lt;/code&gt;, in my opinion, was &lt;a href="http://berlinbuzzwords.de/sessions/scaling-other-way-elasticsearch-miniature"&gt;Elasticsearch in Miniature&lt;/a&gt;, a nice way of presenting Elasticsearch's distributed capabilities. The cool thing is that the Elasticsearch guys installed their system in 5 Raspberry Pi, creating a test ES cluster over WiFi: this allowed them to &lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=AA_gihv5H-Y"&gt;show us&lt;/a&gt; things like how the shards and replicas were rebalanced when the number of nodes in the cluster was changing, or what was the cluster state after destroying and creating replicas. The interesting thing is that everything went fine, having into account that this kind of demos usually tend to fail in the final presentation, and the fact that the network wasn't really reliable is a plus.&lt;/p&gt;</summary><category term="conferences"></category><category term="elasticsearch"></category><category term="solr"></category><category term="lucene"></category><category term="open-source"></category><category term="big-data"></category><category term="java"></category><category term="cassandra"></category><category term="hadoop"></category><category term="pig"></category><category term="search"></category><category term="store"></category><category term="scale"></category></entry><entry><title>Migrating to a Pelican static blog</title><link href="http://thesoftjaguar.com/posts/2013/04/06/pelican-static-blog/" rel="alternate"></link><updated>2013-04-06T02:24:00+02:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2013-04-06:posts/2013/04/06/pelican-static-blog/</id><summary type="html">&lt;p&gt;In October 2011, as a Django training exercise, I decided to develop a blog engine from scratch, and I called it &lt;a href="https://github.com/sharkerz/blogjaguar"&gt;blogjaguar&lt;/a&gt;. It was quite interesting and I had a lot of fun in the process, but it wasn't easy and updating it required a lot of time, even if the web framework was making the things easier. That's why I have decided to drop its support, and migrate to a static blog, integrating it with a basic bootstrap webpage that I had for my personal portfolio.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My old blog" src="http://i.imgur.com/uhdrWYn.png" /&gt;&lt;/p&gt;
&lt;h2&gt;The static blog concept&lt;/h2&gt;
&lt;p&gt;Instead of having a server side application which is going to parse the client request given by the web server, compile a template based on the given data (this step can be avoided sometimes with a cache system), and return it as an HTML page, we simply skip the first two steps, serving the static HTML page directly, without any programming language as a proxy.&lt;/p&gt;
&lt;p&gt;And there are many questions... How? We don't really need an admin interface for writing a blog post: we can do it directly creating another HTML page. We don't need our own comment system, we can include an external one like &lt;em&gt;Disqus&lt;/em&gt;. We don't need to register users in our page, they don't want to register in a blog. There are many tasks that we can do without creating the HTML pages dynamically.&lt;/p&gt;
&lt;p&gt;Fine, now you are thinking that this is a mess, why should you be editting the HTML pages every time you want to create a new blog entry? It seems easier with an administration panel and a WYSWYG editor. And that's why we have static blog generators. &lt;/p&gt;
&lt;h2&gt;The static blog generator&lt;/h2&gt;
&lt;p&gt;There are many static blog generators, and they provide a really interesting set of features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Speed.&lt;/strong&gt; The parse is made once locally, and then the static pages are uploaded to the web root, ready to be served.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portability.&lt;/strong&gt; Your source blog pages are going to be written in a markup language like Markdown, Textile or Restructured Text, so we don't care about the design, and can be reused in other static blog engines, or even in other systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security.&lt;/strong&gt; It is the strongest point, everything is static, no server side code, no headaches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configurability.&lt;/strong&gt; They usually have a configuration file, and you can create your own themes in a really easy way, using different template languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Power.&lt;/strong&gt; &lt;em&gt;Git&lt;/em&gt; power can be applied to the static blogs, tracking the changes in each blog post and using post-hooks for deploying both in &lt;em&gt;github&lt;/em&gt; or in another web server. Forget about WYSWYG and complex admin interfaces: just use markup language, your favorite text editor and your preferred version control system, and you will be happy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cheap.&lt;/strong&gt; You actually don't need expensive hosting, you can upload your static content to &lt;em&gt;github&lt;/em&gt; and it will serve it for you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Maybe the most famous static blog generator is &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt; (Ruby), but I have enough Ruby when I program with Chef, so I wanted a Python alternative. I tried two: &lt;a href="http://nikola.ralsina.com.ar/"&gt;Nikola&lt;/a&gt; and &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My colleague &lt;a href="http://ventolin.org/"&gt;Aengus Walton&lt;/a&gt; has been migrating his Wordpress blog to a static blog philosophy, and for that purpose he recommends Nikola over Pelican, it seems that Nikola handles Wordpress in a better way. I have to say that Nikola is a great alternative, but in my specific case, I decided to use Pelican for this purpose.&lt;/p&gt;
&lt;h2&gt;Why Pelican&lt;/h2&gt;
&lt;p&gt;With Nikola I had some issues when customizing the blog, so instead of trying to figure out what was going on, I decided to try Pelican.&lt;/p&gt;
&lt;p&gt;For me Pelican has everything that I need: comments with Disqus, themes using Jinja2, syntax hightlighting, feeds, Twitter and Google Analytics integration, and publication of articles in multiple languages.&lt;/p&gt;
&lt;p&gt;Actually this last point was one of the reasons why I tried Pelican: I thought that it wasn't supporting multilanguage (Nikola does). I didn't have any problem with Pelican in the process, and everything was astonishingly easy, so I didn't consider any other alternative after such a nice experience.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican? Wat" src="http://i.imgur.com/BgxJhRW.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;The process&lt;/h2&gt;
&lt;h3&gt;Initializiting the project&lt;/h3&gt;
&lt;p&gt;I always recommend using &lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;virtualenvwrapper&lt;/code&gt;, and then install the required &lt;code&gt;pip&lt;/code&gt; packages inside the virtual environment. In this case I am using &lt;code&gt;markdown&lt;/code&gt; as a markup format for my blog post, so I am installing it as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv my-pelican-blog -a ~/my-pelican-blog-project-folder
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install -r pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have set up your virtual environment, the cool part begins. Just run the &lt;code&gt;pelican-quickstart&lt;/code&gt; command, and answer each question:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's going to create the project layout, putting each blogpost markdown file in the &lt;code&gt;content&lt;/code&gt; folder. Running the following command will generate the static HTML files with Pelican's simple theme:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And well, of course you want to check how the blog is looking like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Defining Pelican settings&lt;/h3&gt;
&lt;p&gt;Now you will see two new files, &lt;code&gt;pelicanconf.py&lt;/code&gt; and &lt;code&gt;publishconf.py&lt;/code&gt;. They are settings files, filled with the answers that you gave running &lt;code&gt;pelican-quickstart&lt;/code&gt;. In my specific case, I tuned them up a bit, for matching my personal requirements.&lt;/p&gt;
&lt;p&gt;First of all, I wanted to set &lt;em&gt;DISQUS&lt;/em&gt; as external comment system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;thesoftjaguar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also wanted to arrange the post urls by date, for handling &lt;code&gt;archives&lt;/code&gt; later:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Urls&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;YEAR_ARCHIVE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MONTH_ARCHIVE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I activated the feeds for all the posts, categories and tags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Feeds&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/all.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/all.rss.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.rss.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.rss.xml&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also had some static pages that were not going to be generated by Pelican, so it has to know that we want to parse them as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TEMPLATE_PAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;projects.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;projects.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, I decided to implement my own theme, using &lt;em&gt;Twitter Bootstrap&lt;/em&gt;. Pelican will check in different places for a folder match, and then it will parse the content from that theme folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bootstrap-theme&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creating your own theme&lt;/h3&gt;
&lt;p&gt;If you want some extra customization (like I do), you will create your own theme. &lt;a href="https://github.com/getpelican/pelican/tree/master/pelican/themes"&gt;Pelican themes&lt;/a&gt; are quite cool, but I already had a really basic page using &lt;em&gt;Twitter bootstrap&lt;/em&gt; and I wanted to adapt my old Django blog to that style.&lt;/p&gt;
&lt;p&gt;A way of doing this, is to create a folder with your theme name, as it is defined in the &lt;code&gt;THEME&lt;/code&gt; setting parameter. In my case I called my theme &lt;code&gt;bootstrap-theme&lt;/code&gt;, with two other folders: &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;templates&lt;/code&gt;. Pelican is requiring a specific &lt;a href="http://docs.getpelican.com/en/3.1.1/themes.html#structure"&gt;folder structure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I copied &lt;a href="https://github.com/getpelican/pelican/tree/master/pelican/themes/simple/templates"&gt;simple theme&lt;/a&gt; template files into my &lt;code&gt;templates&lt;/code&gt; folder, and I editted them. In addition, there is a cool feature in Pelican 3: if it doesn't find a required template file, it will inherit it from the &lt;code&gt;simple&lt;/code&gt; theme, so you don't need to store uneditted simple theme files in your custom theme.&lt;/p&gt;
&lt;p&gt;Now, you are on your own. You should keep in mind that there are several &lt;a href="http://docs.getpelican.com/en/3.1.1/themes.html#templates-and-variables"&gt;template variables&lt;/a&gt; that you have to use, but that's it.&lt;/p&gt;
&lt;p&gt;However, I found several problems when I wanted to display the blog archives by year and month, and Pelican's documentation is not really clear about that subject. Using Jinja2 &lt;code&gt;groupby&lt;/code&gt; filter was my way of solving the problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;lt;h1 class=&amp;quot;page-title&amp;quot;&amp;gt;Archive&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;year_articles&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;groupby&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date.year&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;li&amp;gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;year&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/h2&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;month&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;month_articles&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;year_articles&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;groupby&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date.month&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;li&amp;gt;&amp;lt;h4&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;month_articles&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;.date.strftime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%B&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/h4&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;month_articles&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;div class=&amp;quot;entry-archive&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;lt;div class=&amp;quot;date&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.date.strftime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%A %d&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;lt;div class=&amp;quot;detail&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                    &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; rel=&amp;quot;bookmark&amp;quot; title=&amp;quot;Permalink to &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.title&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;striptags&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="The groupby result" src="http://i.imgur.com/Ob65o4J.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Writing your first article&lt;/h3&gt;
&lt;p&gt;Just create a &lt;code&gt;.md&lt;/code&gt; file in the &lt;code&gt;content&lt;/code&gt; folder, and write the metadata, followed by the actual Markdown formatted text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: Migrating to a Pelican static blog
Date: 2013-04-06 02:24
Tags: static-blog, markdown, pelican, python, web-development, git, django
Category: programming
Slug: pelican-static-blog
Summary: How did I migrate my Django blog to a static one, using Pelican.

This is the content of my blog post. I should use Markdown here.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the file, run &lt;code&gt;make html&lt;/code&gt;, and that's it.&lt;/p&gt;
&lt;h3&gt;Deploying to your web server&lt;/h3&gt;
&lt;p&gt;I have my Pelican project, &lt;a href="https://github.com/sharkerz/thesoftjaguar"&gt;thesoftjaguar&lt;/a&gt;, on Github. However, I don't intend to serve the static files there, because I already have a personal web server.&lt;/p&gt;
&lt;p&gt;I am using a git post-hook to my personal web server, as explained in &lt;a href="http://thesoftjaguar.com/posts/2012/02/29/deploying-applications-with-git/"&gt;Deploying applications with git&lt;/a&gt;, so I have two remotes in my &lt;code&gt;thesoftjaguar&lt;/code&gt; repository: github and my personal server. But the &lt;code&gt;post-receive&lt;/code&gt; hook is going to be a bit different, because I only want to serve the &lt;code&gt;output&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GIT_WORK_TREE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/dario/git/tmp/thesoftjaguar

git checkout -f
git reset --hard
rm -rf /home/dario/www/*
cp -r &lt;span class="s2"&gt;&amp;quot;$GIT_WORK_TREE/thesoftjaguar/output/.&amp;quot;&lt;/span&gt; /home/dario/www/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now we add the new remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add web dario@darioblanco.com:git/thesoftjaguar.git
&lt;span class="nv"&gt;$ &lt;/span&gt;git push web +master:refs/heads/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From now on, the deployment is totally independent from the github repo, and is going to be extremely comfortable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push web master
&lt;/pre&gt;&lt;/div&gt;</summary><category term="static-blog"></category><category term="markdown"></category><category term="pelican"></category><category term="python"></category><category term="web-development"></category><category term="git"></category><category term="django"></category></entry><entry><title>FOSDEM 2013, it is more than beer</title><link href="http://thesoftjaguar.com/posts/2013/03/08/fosdem-2013/" rel="alternate"></link><updated>2013-03-08T20:02:00+01:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2013-03-08:posts/2013/03/08/fosdem-2013/</id><summary type="html">&lt;p&gt;After my long blog hibernation, I wanted to write about &lt;em&gt;FOSDEM 2013&lt;/em&gt;, which took place in Brussels on February 2nd and 3rd, and it wasn't only for drinking beer. OK, you got me, the beer is always a motivating factor.&lt;/p&gt;
&lt;p&gt;&lt;img alt="We share a dark past" src="http://i.imgur.com/Il4kdf4.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;The Virtualization alternative&lt;/h2&gt;
&lt;p&gt;The first day I was lost, the classrooms were really crowded, and I missed the Configuration Systems Management talk because, for "security purposes", nobody else could enter in the room. There is always a B Plan, so I attended some &lt;em&gt;Xen&lt;/em&gt; talks about security using &lt;em&gt;Pygrub&lt;/em&gt; and fixed kernels, explaining different attacks that can be performed to our virtual machines, some security practices like PV VMs or the Xen Security Module, and how to virtualizate in CentOS 6. It was nice to hear about all of this, because I am not really advanced in that issue.&lt;/p&gt;
&lt;h2&gt;We should cook: Configuration Systems Management&lt;/h2&gt;
&lt;p&gt;However, Saturday afternoon was the Configuration Systems Management time. At that moment, I was aware of the overcrowding problem, so I arrived to the classroom 30 minutes earlier, and I spent the rest of the day there. From all the talks, I highlight these:&lt;/p&gt;
&lt;h3&gt;Learning to Automate&lt;/h3&gt;
&lt;p&gt;This was a continuation of what I missed that morning, but the people were explaining their knowledge about certain &lt;em&gt;DevOps&lt;/em&gt; practices, their experience with &lt;em&gt;Chef&lt;/em&gt; and &lt;em&gt;Puppet&lt;/em&gt; and how difficult can be sometimes. It was focused in how to debug your &lt;em&gt;Chef&lt;/em&gt; cookbooks, introducing other projects like &lt;a href="http://acrmp.github.com/foodcritic/"&gt;Foodcritic&lt;/a&gt; and &lt;a href="https://github.com/opscode/test-kitchen"&gt;test-kitchen&lt;/a&gt;. Of course, &lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; was the recommended method for testing your young cookbooks.&lt;/p&gt;
&lt;p&gt;&lt;img alt="We need a layered approach to Systems Management" src="http://i.imgur.com/bvFEbyM.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;Using Ruby frameworks to bring sanity to your infrastructure&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Vagrant&lt;/em&gt; was over and over again, because it is a really interesting way of creating a development environment, so I wasn't surprised about how insistent they were about its use. But the main point here was that they explained some Ruby frameworks, and more important: their thoughts about each of them. I am not a Ruby expert so it was nice to know that &lt;em&gt;Cucumber&lt;/em&gt; was not recommended at all, that &lt;em&gt;Rspec&lt;/em&gt; have &lt;em&gt;Chefspec&lt;/em&gt; and &lt;em&gt;Rspec-Puppet&lt;/em&gt; as reference in this world, and a brief introduction to &lt;em&gt;Minitest&lt;/em&gt; never hurts.&lt;/p&gt;
&lt;p&gt;However, this talk was for explaining the &lt;em&gt;Test-Kitchen&lt;/em&gt; project: useful for testing cookbooks across different operating systems, and capable of running the tests in Virtualbox or Openstack. Then you realize how complicated the testing of Configuration Management Systems can be, but possible after all.&lt;/p&gt;
&lt;p&gt;Besides all of this, other libraries were meant, like &lt;em&gt;Celulloid&lt;/em&gt;, &lt;em&gt;Bats&lt;/em&gt; (Bash automated testing system), &lt;em&gt;Chef-Workflow&lt;/em&gt;, &lt;em&gt;Berkshelf&lt;/em&gt;, &lt;em&gt;Apache Mesos&lt;/em&gt;, &lt;em&gt;Faraday&lt;/em&gt;, &lt;em&gt;Sinatra&lt;/em&gt;, &lt;em&gt;Rspec-dns&lt;/em&gt;, &lt;em&gt;Ruby-dns&lt;/em&gt; and more... That was all the libraryfest for the day.&lt;/p&gt;
&lt;h3&gt;VeeWee&lt;/h3&gt;
&lt;p&gt;I enjoyed this one because it was a surprise talk (though I didn't love why it became a surprise). It was awesome to know more about the &lt;a href="https://github.com/jedi4ever/veewee"&gt;VeeWee&lt;/a&gt; project and I definitely recommend it if you want to create almost any virtual machine in a really easy way.&lt;/p&gt;
&lt;p&gt;&lt;img alt="One does not simply choose the right kind of beer" src="http://i.imgur.com/Xrv3xC0.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;It's Python time&lt;/h2&gt;
&lt;p&gt;Sunday was the Python day, an overcrowded room as on Saturday but I could manage to pick a nice seat. The first talk was &lt;em&gt;Astonishing Python tricks&lt;/em&gt;, a short one but explaining some Python particularities and putting together several Python patterns that the community have been using. Besides this, there are other talks that I want to highlight:&lt;/p&gt;
&lt;h3&gt;Gaffer - Application deployment, monitoring and supervision made simple&lt;/h3&gt;
&lt;p&gt;I was skeptic about &lt;a href="http://gaffer.readthedocs.org/"&gt;Gaffer&lt;/a&gt;, but I am going to give it a try. At first I thought that it was like a distributed supervisor but it is more than that. I can think in a lot of uses for a company environment, and I am planning an open source project using this library.&lt;/p&gt;
&lt;h3&gt;Plone, the best python-based CMS&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://plone.org/"&gt;Plone&lt;/a&gt; seems a really mature Python CMS. The security was his strongest point (and Python :P) but the weakest one was the deployment (as expected). If you really want to deploy even the most basic application, and you are not familiar to the basic concepts (and some other not as basics), is going to be difficult. They acknowledged those problems, but I have to say that as a CMS solution seems a really interesting one, if you can overcome the drawbacks. In my case, I am a control maniac, so that's why I prefer microframeworks like &lt;em&gt;Flask&lt;/em&gt;, other not as micro as &lt;em&gt;Django&lt;/em&gt;, and I intend to flee from CMS, though sometimes are really useful for certain situations.&lt;/p&gt;
&lt;h3&gt;TDD from scratch&lt;/h3&gt;
&lt;p&gt;We love &lt;em&gt;Test Driven Development&lt;/em&gt;, and if not, you should. Sometimes is hard, really hard, to program the test, because we are lazy. But then, with the experience, you realize that if we would have programmed a test at first, everything would have been easier. This talk addressed all the benefits of that philosophy change, and what tools we can use for easing the process.&lt;/p&gt;
&lt;h3&gt;Vaurien the Chaos TCP Proxy&lt;/h3&gt;
&lt;p&gt;Based on Netflix Chaos Monkey project, &lt;a href="http://vaurien.readthedocs.org/"&gt;Vaurien&lt;/a&gt; seems an useful way for testing distributed systems (and yeah, distributed systems need a lot of testing). Having a proxy between your code and any other system, in which you can put different protocols and behaviors, seems a really good approach for it. I am currently doing some testing actions with mock, and I think that &lt;em&gt;Vaurien&lt;/em&gt; could solve them easily , so giving this project a try wouldn't be a bad idea.&lt;/p&gt;
&lt;h3&gt;Python for Humans&lt;/h3&gt;
&lt;p&gt;My favorite talk, because it was a constructive Python critic, with the open source mind as a solution to all of its problems. I don't have to add much more because the slides are easy to be &lt;a href="https://speakerdeck.com/kennethreitz/python-for-humans"&gt;found&lt;/a&gt;. By the way, I also loved the &lt;a href="http://python-guide.org"&gt;The Hitchhiker’s Guide to Python&lt;/a&gt;&lt;/a&gt; project, I think that anyone who wants to get started with Python should take a look at it.&lt;/p&gt;
&lt;h3&gt;How do event loops work in Python?&lt;/h3&gt;
&lt;p&gt;I love Asynchronous Programming, and I love how stupid I feel when I am dealing with it. In this talk, the &lt;a href="http://pyuv.readthedocs.org"&gt;pyuv&lt;/a&gt; was introduced, and it seems really promising. It can be integrated with Twisted and Tornado. Besides that, there was an explanation and comparison of the different event loop libraries.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Believe it or not, this place was an important piece of FOSDEM 2013" src="http://i.imgur.com/pWQSUZk.jpg" /&gt;&lt;/p&gt;</summary><category term="conferences"></category><category term="python"></category><category term="ruby"></category><category term="devops"></category><category term="virtualization"></category><category term="tdd"></category><category term="open-source"></category></entry><entry><title>ApacheCon Europe 2012</title><link href="http://thesoftjaguar.com/posts/2012/11/11/apachecon-europe-2012/" rel="alternate"></link><updated>2012-11-11T20:44:00+01:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-11-11:posts/2012/11/11/apachecon-europe-2012/</id><summary type="html">&lt;p&gt;On Wednesday it was ApacheCon day, lot of interesting stuff regarding Apache Lucene, Solr and Elasticsearch. I am not an expert with search engines, and this is a good start for establishing the basic concepts and understanding how some people have solved search problems in their systems.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Captain Obvious strikes again" src="https://pbs.twimg.com/media/A7Fb2aPCAAAtQy2.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Compound Terms Query Parser for Great Shopping Experience&lt;/h2&gt;
&lt;p&gt;This &lt;a href="http://www.apachecon.eu/schedule/presentation/18/?utm_source=twitter&amp;amp;utm_medium=social&amp;amp;utm_content=79e580ba-95ca-43cb-9739-95693cf4770e"&gt;talk&lt;/a&gt; explained the problem of returning precise search results when there are tricky queries, based on &lt;a href="http://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;ved=0CCcQFjAA&amp;amp;url=http%3A%2F%2Flucene.sourceforge.net%2Fpapers%2Friao97.ps&amp;amp;ei=7O-fUPHRLYSh4gTA4IGQCA&amp;amp;usg=AFQjCNF3SmHeiPe-h1A48ztdx8Qx1R-r7w"&gt;Space Optimizations for Total Ranking&lt;/a&gt; paper, and a match spotting using the info explained by the client and facet counts.&lt;/p&gt;
&lt;p&gt;However, there are some queries which are almost impossible to guess, like for example &lt;code&gt;red jeans&lt;/code&gt; in a search system which supports colors, you will have red clothes matches, matches with trademarks whose name contains &lt;code&gt;red&lt;/code&gt; or &lt;code&gt;jeans&lt;/code&gt;. You can minimize the problem, and of course the client only wants exact results, not a huge list of results that he is not going to check, but at the end a nice approach will be less guessing and more freedom to the client in his queries, for instance, specifying if he want to search by color or by trademark.&lt;/p&gt;
&lt;h2&gt;Apache Mahout in context&lt;/h2&gt;
&lt;p&gt;A nice &lt;a href="http://www.apachecon.eu/schedule/presentation/1/"&gt;explanation&lt;/a&gt; of the Apache Mahout project as a data analysis tool, and use cases of what we can do with our huge load of data.&lt;/p&gt;
&lt;p&gt;A good example of this is the &lt;code&gt;Frequently Bought Together&lt;/code&gt; and &lt;code&gt;What Other Items Do Customers Buy After Viewing This Item?&lt;/code&gt; tags in an Amazon product page.&lt;/p&gt;
&lt;h2&gt;Big Search with Big Data Principles&lt;/h2&gt;
&lt;p&gt;Eric presented his &lt;a href="http://www.apachecon.eu/schedule/presentation/13/"&gt;problem&lt;/a&gt;, which consisted in millions of text documents that should be indexed, and they could have really strange formats.&lt;/p&gt;
&lt;p&gt;The solution was nice, applying technologies in which they were familiar with, and then he spoke about &lt;code&gt;Solr4&lt;/code&gt;. We should highlight that &lt;code&gt;Solr&lt;/code&gt; is becoming a noSQL database itself (&lt;code&gt;Elasticsearch&lt;/code&gt; as well), having a key/value store engine, and they used &lt;code&gt;.avro&lt;/code&gt; files for the cache, which was quite interesting.&lt;/p&gt;
&lt;p&gt;Other design choices were &lt;code&gt;ZooKeeper&lt;/code&gt; over &lt;code&gt;NFS&lt;/code&gt;, &lt;code&gt;SCP&lt;/code&gt;, etc.. for sending files between nodes (less error prone and more obvious reasons, &lt;code&gt;ZooKeeper&lt;/code&gt; is powerful), &lt;code&gt;Apache Tika&lt;/code&gt; as a pipeline, handling the errors with an error query, &lt;code&gt;Solrmeter&lt;/code&gt; for monitoring (the central monitoring using &lt;code&gt;Nagios&lt;/code&gt; with the &lt;code&gt;Solr&lt;/code&gt; plugin), a pooled environment (like for example 1 node for development, 6 for production and the rest for load testing) and a &lt;code&gt;Grim Reaper&lt;/code&gt; for restarting instances which are not working as expected.&lt;/p&gt;
&lt;p&gt;In addition, there were some problems which are still present, like the user queries analysis, done with Solrmeter or reading them in an excel file, and the cycle scavenging, which is being done with &lt;code&gt;Condor&lt;/code&gt; but not without complications.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hoffenheim Arena looks good at night" src="http://i.imgur.com/puR3H.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Solr 4: The SolrCloud Architecture&lt;/h2&gt;
&lt;p&gt;And it was the turn of &lt;a href="http://www.apachecon.eu/schedule/presentation/23/"&gt;showing&lt;/a&gt; how to hack a project that wasn't planned for distributed searching from the beggining, one of the biggest weaknesses in Solr.&lt;/p&gt;
&lt;p&gt;I want to highlight the use of &lt;code&gt;MurmurHash&lt;/code&gt; for assigning the documents to the different shards, &lt;code&gt;ZooKeeper&lt;/code&gt; again (in Elasticsearch this is definitely handled in a nicer way), &lt;code&gt;PeerSync&lt;/code&gt; for data replication and so on, and a last introduction to Netflix child: &lt;code&gt;Chaos Monkey&lt;/code&gt;, used for testing.&lt;/p&gt;
&lt;p&gt;SolrCloud hasn't convinced me, there are some problems when you want to scale the system, because there is a shard limit that you have to set at first, so &lt;code&gt;SolrCloud&lt;/code&gt; will assign a hash range to each shard. There are some hacks for allowing this, like the shard split (so the hash range will be reassigned). That's another problem that we have in Elasticsearch, but the shard arranging is automatic.&lt;/p&gt;
&lt;h2&gt;Personalized Search on the Largest Flash Site in America (Gilt)&lt;/h2&gt;
&lt;p&gt;Another talk regarding a &lt;a href="http://www.apachecon.eu/schedule/presentation/21/"&gt;problem&lt;/a&gt; and how a company has solved it.&lt;/p&gt;
&lt;p&gt;They were using Solr for getting only the items id (&lt;code&gt;skuId&lt;/code&gt; and &lt;code&gt;lookId&lt;/code&gt;), so Solr had only the index. Then, they enriched the search result asking the database for the rest of the params. For being able to do all of this, they created three own plugins for Solr, I didn't like this approach and in one case was a little hacky, but they know better about their own systems and at the end it was working as they expected it to work.&lt;/p&gt;
&lt;p&gt;Like with the first talk, we had the problem of the search query: the product data is not clean, it can have distractive descriptions, poorly named colors and misleading brand names. It was interesting how tricky can be the synonyms if your search engine supports this feature. At the end we have the same conclusion: maybe it is better if you leave that choice to the user for avoiding bad results.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Color names if you are a girl" src="https://pbs.twimg.com/media/A7G74L7CUAU6XLo.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Battle of the giants: Apache Solr 4.0 vs Elasticsearch&lt;/h2&gt;
&lt;p&gt;The last &lt;a href="http://www.apachecon.eu/schedule/presentation/24/"&gt;talk&lt;/a&gt; was the one in which I put more expectations, and it didn't convince me, maybe because I was hyped.&lt;/p&gt;
&lt;p&gt;It was a brief explanation of each system, which is not bad, but some query examples would have helped a lot. Elasticsearch seemed really promising with the prospective search, nested objects, moving shard and replicas, more indices storage options, index structure and not needing to reload the config. And that's what Solr doesn't have.&lt;/p&gt;
&lt;p&gt;There were also some features supported by both and well, Solr supports multilingual data handling, but is not enough. I really want to try both systems but right now, from the beginning, &lt;code&gt;Elasticsearch&lt;/code&gt; is more interesting for me, especially if I want to have a distributed search environment.&lt;/p&gt;</summary><category term="conferences"></category><category term="elasticsearch"></category><category term="solr"></category><category term="lucene"></category><category term="open-source"></category><category term="big-data"></category><category term="java"></category></entry><entry><title>Useful Sublime packages</title><link href="http://thesoftjaguar.com/posts/2012/09/07/useful-sublime-packages/" rel="alternate"></link><updated>2012-09-07T19:33:00+02:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-09-07:posts/2012/09/07/useful-sublime-packages/</id><summary type="html">&lt;p&gt;I am a &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text Editor&lt;/a&gt; fan. Before it, I was using &lt;a href="http://macromates.com/"&gt;TextMate&lt;/a&gt; a lot but right now I am working in Linux environments too, so I decide to switch to Sublime because is available in all platforms, is not Java, and the plugin ecosystem is pretty atractive.&lt;/p&gt;
&lt;h2&gt;Introducing Sublime Package Control&lt;/h2&gt;
&lt;p&gt;Sublime has a lot of additional features if you install packages, but for being able to do it in a much more comfortable way, the &lt;a href="http://wbond.net/sublime_packages/package_control"&gt;Sublime Package Control&lt;/a&gt; is a great approach. And what is that? It is a full-featured package manager that helps you discovering, installing, updating and removing packages.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sublime Package Control" src="http://wbond.net/sublime_packages/img/package_control/command_palette.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Installing the Sublime Package Control&lt;/h2&gt;
&lt;p&gt;In Sublime, open the console (&lt;code&gt;Ctrl+`` or&lt;/code&gt;View&amp;gt;Show Console`) and paste the following snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Package Control.sublime-package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ipp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sublime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;installed_packages_path&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyHandler&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://sublime.wbond.net/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%20&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Please restart Sublime Text to finish installation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command creates the Installed Packages folder for you (if necessary), and then downloads the &lt;code&gt;Package Control.sublime-package&lt;/code&gt; into it.&lt;/p&gt;
&lt;p&gt;Now, installing packages is really easy. Package Control is driven by the &lt;code&gt;Command Pallete&lt;/code&gt;. To open the pallete, press &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; (Windows, Linux) or &lt;code&gt;Cmd+Shift+P&lt;/code&gt; (OS X). All Package Control commands begin with &lt;code&gt;Package Control:&lt;/code&gt;, so start by typing &lt;code&gt;Package,&lt;/code&gt; so for installing a new package just type &lt;code&gt;Package Control:Install Package&lt;/code&gt; and type the name there. That's all!&lt;/p&gt;
&lt;h2&gt;Useful packages&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://github.com/squ1b3r/Djaneiro"&gt;Djaneiro&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Django support.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/SublimeText/EncodingHelper"&gt;EncodingHelper&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Provides the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attempts to guess encoding of files.&lt;/li&gt;
&lt;li&gt;Show encoding on status bar.&lt;/li&gt;
&lt;li&gt;Show when the current document is maybe broken because was opened with an incorrect encoding.&lt;/li&gt;
&lt;li&gt;Convert to UTF-8 from a variete of encodings organized in a menu.&lt;/li&gt;
&lt;li&gt;Convert to UTF-8 quickly from guessed encoding via menuitem.&lt;/li&gt;
&lt;li&gt;Convert to UTF-8 automatically when opening a file via some defined encodings found on User preferences.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/kemayo/sublime-text-2-git/wiki"&gt;Git&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Supports status, log viewing, diff viewing, blame, annotate, add files, commit and quick commit.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/ehamiter/ST2-GitHubinator"&gt;GitHubinator&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Allows you to select text in a Sublime Text 2 file, and see the highlighted lines on GitHub's remote repo, if one exists.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/dreadatour/Pep8Lint"&gt;Pep8Lint&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Checks Python files against some of the style conventions in PEP8.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/biermeester/"&gt;PylinterPylinter&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Allows automatic Python source code checking by Pylint. Pylint needs to be installed separately.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://wbond.net/sublime_packages/alignment"&gt;SublimeAlignment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dead-simple alignment of multi-line selections and multiple selections.  Align multiple selections to the same column by inserting spaces (or tabs) Align all lines in a multi-line selection to the same indent level Align the first = on each line of a multi-line selection to the same column.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/Kronuz/SublimeCodeIntel"&gt;SublimeCodeIntel&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code intelligence plugin ported from Open Komodo Editor to Sublime Text 2. Supports &lt;code&gt;PHP, Python, RHTML, JavaScript, Smarty, Mason, Node.js, XBL, Tcl, HTML, HTML5, TemplateToolkit, XUL, Django, Perl, Ruby, Python3&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Provides the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jump to Symbol Definition.&lt;/li&gt;
&lt;li&gt;Jump to the file and line of the definition of a symbol.&lt;/li&gt;
&lt;li&gt;Imports autocomplete.&lt;/li&gt;
&lt;li&gt;Shows autocomplete with the available modules/symbols in real time.&lt;/li&gt;
&lt;li&gt;Function Call tooltips.&lt;/li&gt;
&lt;li&gt;Displays information in the status bar about the working function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/welovewordpress/SublimeHtmlTidy"&gt;SublimeHtmlTidy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Allows you to clean and tidy up your HTML code.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/SublimeLinter/SublimeLinter"&gt;SublimeLinter&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Highlights lines of code the linter deems to contain (potential) errors. It also supports highlighting special annotations (for example: TODO) so that they can be quickly located.  Built in linters for the following languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;CoffeeScript&lt;/em&gt; - lint via coffee -s -l.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CSS&lt;/em&gt; - lint via built-in csslint.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Git Commit Messages&lt;/em&gt; - lint via built-in module based on A Note About Git Commit Messages.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Haml&lt;/em&gt; - lint via haml -c.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Java&lt;/em&gt; - lint via javac -Xlint.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Javascript&lt;/em&gt; - lint via built in jshint, jslint, or the closure linter (gjslint) (if installed).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Objective-J&lt;/em&gt; - lint via built-in capp_lint.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Perl&lt;/em&gt; - lint via Perl:Critic or syntax+deprecation checking via perl -c.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PHP&lt;/em&gt; - syntax checking via php -l.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Puppet&lt;/em&gt; - syntax checking via puppet parser validate.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt; - native, moderately-complete lint.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ruby&lt;/em&gt; - syntax checking via ruby -wc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/robcowie/SublimeTODO"&gt;SublimeTODO&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Extracts and lists TODO comments from open files and project folders.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/adzenith/WordHighlight"&gt;WordHighlight&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Highlights all copies of a word that's currently selected, or, optionally, highlights all copies of a word which currently has the insertion cursor upon it.&lt;/p&gt;
&lt;h2&gt;Themes&lt;/h2&gt;
&lt;p&gt;When installing a new package through the Package Control, there are some special ones named &lt;code&gt;Themes&lt;/code&gt;. They will change the look and feel of Sublime. Just search them in &lt;code&gt;Package Control:Install Packages&lt;/code&gt; with the string &lt;code&gt;Theme - ThemeName&lt;/code&gt;. For activating the theme just open the User Settings Preferences file (Sublime Text 2 -&amp;gt; Preferences -&amp;gt; Settings - User`) and add, append or update the theme entry like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;theme&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Soda Light.sublime-theme&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/buymeasoda/soda-theme/"&gt;Soda&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dark and light custom themes.&lt;/p&gt;</summary><category term="sublime"></category></entry><entry><title>Hackathon project: Jenkins is calling</title><link href="http://thesoftjaguar.com/posts/2012/09/04/jenkins-is-calling/" rel="alternate"></link><updated>2012-09-04T18:59:00+02:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-09-04:posts/2012/09/04/jenkins-is-calling/</id><summary type="html">&lt;h2&gt;What is a Hackathon?&lt;/h2&gt;
&lt;p&gt;In the company I work for, &lt;a href="http://www.edelight.de/"&gt;edelight&lt;/a&gt;, we have Hackathon days. The idea is to team up with colleagues and work on a project of your choice for one entire day. There are no limitations on what you want to do and at the end of the day you have to present a prototype to all the team. So the last Hackathon was in July and there were a lot of interesting projects, you can always check what is happening in our &lt;a href="http://labs.edelight-group.com/"&gt;team blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Having fun with Jenkins&lt;/h2&gt;
&lt;p&gt;We have a continuous integration server using &lt;a href="http://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt;, with a post-hook to our github repos for tracking the master branch on every project. It is really important for checking if the build is failing in the staging server, and it helps a lot in terms of code quality.&lt;/p&gt;
&lt;p&gt;In my case, I decided to create a really basic Android application, showing an annoying window with a silly background music whenever the Jenkins build is red (failing), or when is switching from the red state to blue (fixed).&lt;/p&gt;
&lt;h2&gt;A technical approach&lt;/h2&gt;
&lt;p&gt;In order to have an asynchronous communication, the Android application is implementing a &lt;a href="http://tools.ietf.org/html/rfc6455"&gt;WebSocket&lt;/a&gt; Java client, subscribed to a &lt;a href="http://www.tornadoweb.org/en/stable/"&gt;Tornado&lt;/a&gt; application that implements the WebSocket server. If you are a bit scared about Tornado, please don't, it is quite easy to create a &lt;a href="http://www.tornadoweb.org/en/stable/websocket.html?highlight=websockets"&gt;WebSocket server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Android app main view" src="http://i.imgur.com/SFpfb.png" /&gt;&lt;/p&gt;
&lt;h2&gt;The push notification&lt;/h2&gt;
&lt;p&gt;Once the client is subscribed, every time a Jenkins build is changing its status to &lt;code&gt;failing&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt;, the Tornado app will know it and will send a broadcast message (push message) to all the suscribers. In that case, the Android client (even if it is in sleeping mode), will populate the Activity window in front of all the ones that you had opened before, and an awesome music (copyright free of course) will be played.&lt;/p&gt;
&lt;h2&gt;The build is failing ¬¬&lt;/h2&gt;
&lt;p&gt;When a new commit is pushed into master, Jenkins runs the project tests, code coverage, pep8, pylint... If something is wrong, the build will fail. In that case, the mobile phone will display the TROLOLO window, with the &lt;a href="http://youtu.be/ednKK8GlvwI"&gt;TROLOLO song&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The build is fixed ^^&lt;/h2&gt;
&lt;p&gt;Of course, if the build is failing, someone has to fix it. If a benevolent soul has commited the patch fix into master, Jenkins will pass all the tests again, and it will stop spamming our email accounts. The way in which it stops the spam is quite funny: sending a last email message saying that it is fixed.&lt;/p&gt;
&lt;p&gt;However, I thought that the spam wasn't enough, so in that case, your mobile phone will also display the KEYBOARD CAT window, and the &lt;a href="http://youtu.be/J---aiyznGQ"&gt;KEYBOARD CAT song&lt;/a&gt; as a token of victory.&lt;/p&gt;
&lt;h2&gt;Life's for sharing&lt;/h2&gt;
&lt;p&gt;You can browse the code on &lt;a href="https://github.com/sharkerz/jenkins-calling"&gt;github&lt;/a&gt;. I haven't had a lot of time for developing this, so I haven't cleaned the code a lot (and I'm sharing the client only), but if someone is really interested in it, you can always ping me in twitter or by email.&lt;/p&gt;</summary><category term="hackathon"></category><category term="jenkins"></category><category term="android"></category><category term="java"></category><category term="websockets"></category><category term="tornado"></category><category term="python"></category></entry><entry><title>Django regroup template tag</title><link href="http://thesoftjaguar.com/posts/2012/05/27/django-regroup-tag/" rel="alternate"></link><updated>2012-05-27T18:53:00+02:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-05-27:posts/2012/05/27/django-regroup-tag/</id><summary type="html">&lt;p&gt;It is a common problem, the case in which we have a huge dictionary, with several fields with repeated data among those dictionary entries. Printing the dictionary, entry by entry, is going to show those repeated field values, and sometimes is not really cool. For a better visualization, we can think that is better to group the entries with the same field value, and we don't know how to do it in the template side.&lt;/p&gt;
&lt;h2&gt;We can do more in the template&lt;/h2&gt;
&lt;p&gt;What is the regroup template tag? It will helps us to loop through a data structure, grouping each entry by a desired field, or maybe we want to group more than once.&lt;/p&gt;
&lt;p&gt;It is a bit tricky to understand this issue so let's put an example. For instance, we have a &lt;code&gt;gps&lt;/code&gt; points list where each of it has &lt;code&gt;latitude&lt;/code&gt;, &lt;code&gt;longitude&lt;/code&gt; and a &lt;code&gt;date&lt;/code&gt;. The date is a &lt;code&gt;datetime&lt;/code&gt; object (let's think about it like &lt;code&gt;year + month +  day&lt;/code&gt;, though it has an hour and the representation of that object is a bit different). Then, we want to organize those points by &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, we will have a link per &lt;code&gt;day&lt;/code&gt; to another page, showing with detail all the gps points for that specific day. Those days are grouped by months, and the months by years. Both months and years values will redirect to a page filtering the entries.&lt;/p&gt;
&lt;p&gt;A possible approach to this problem would be the following piece of code (arranged in a table), where &lt;code&gt;points&lt;/code&gt; is the variable list provided by the view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;regroup&lt;/span&gt; &lt;span class="nv"&gt;points&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;Y&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;points_by_year&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;entry-content&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;year_points&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;points_by_year&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;caption&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;year_points.grouper&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;caption&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;regroup&lt;/span&gt; &lt;span class="nv"&gt;year_points.list&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;M&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;points_by_month&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;month_points&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;points_by_month&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;month_points.grouper&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;regroup&lt;/span&gt; &lt;span class="nv"&gt;month_points.list&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;points_by_day&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;day_points&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;points_by_day&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="nv"&gt;nextpage_name&lt;/span&gt; &lt;span class="nv"&gt;year_points.grouper&lt;/span&gt; &lt;span class="nv"&gt;month_points.grouper&lt;/span&gt; &lt;span class="nv"&gt;day_points.grouper&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;day_points.grouper&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;grouper&lt;/code&gt; variable will show the string of the item that was grouped by, and if it was by year, then it is the year value, because we have filtered it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;regroup&lt;/span&gt; &lt;span class="nv"&gt;points&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;Y&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;points_by_year&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the following piece of code is another way of creating the url for the next page. We need to specify the &lt;code&gt;nextpage_name&lt;/code&gt; in &lt;code&gt;urls.py&lt;/code&gt; and the other two strings are the arguments, so the server will know what page to show.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="nv"&gt;nextpage_name&lt;/span&gt; &lt;span class="nv"&gt;year_points.grouper&lt;/span&gt; &lt;span class="nv"&gt;month_points.grouper&lt;/span&gt; &lt;span class="nv"&gt;day_points.grouper&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Let's see how it looks&lt;/h2&gt;
&lt;p&gt;The result should be something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Regrouping tag overview" src="http://i.imgur.com/fILp6.png" /&gt;&lt;/p&gt;
&lt;p&gt;We don't really need the &lt;code&gt;latitude&lt;/code&gt; and &lt;code&gt;longitude&lt;/code&gt; here, but we need to know that we have X points for a specific day, to show only the involved days. We can create a set of tables where each table is a single year. At the end, it is very simple and there are other solutions, but this is one of them, using the powerful Django regroup template tag. You can browse more information about these tags in the &lt;a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs"&gt;Django Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Other template languages&lt;/h2&gt;
&lt;p&gt;This guide can be applied to other template languages like &lt;code&gt;Jinja2&lt;/code&gt;. There is a great explanation in the &lt;a href="http://jinja.pocoo.org/docs/templates/#groupby"&gt;Jinja2 Documentation&lt;/a&gt;, and is pretty similar to the &lt;code&gt;Django&lt;/code&gt; approach.&lt;/p&gt;</summary><category term="django"></category><category term="template-engine"></category><category term="python"></category><category term="web-development"></category></entry><entry><title>Deploying applications with git</title><link href="http://thesoftjaguar.com/posts/2012/02/29/deploying-applications-with-git/" rel="alternate"></link><updated>2012-02-29T16:33:00+01:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2012-02-29:posts/2012/02/29/deploying-applications-with-git/</id><summary type="html">&lt;p&gt;Usually, when we work with an application, especially with web applications, we wonder what is the best way for deploying it, and there are many. It is really important to be comfortable with the way in which we deploy these kind of applications, because the productivity is going to be strongly related to it. Here I explain some &lt;code&gt;git&lt;/code&gt; basics, and how to easily configure it for updating automatically a specific folder (for instance, the web root folder) with the last pushed revision.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git trunk" src="http://thekevindolan.com/wp-content/uploads/2010/03/git_two1-600x480.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Understanding the basics&lt;/h2&gt;
&lt;p&gt;Instead of copypaste the web app local content, or work directly on the server, we will have a distributed version control system like &lt;code&gt;git&lt;/code&gt; to check every local changes (even if we want to work individually), with all the functionality that it provides. Therefore, every time a commit is made, it will not be in the remote server until we do the appropiate push. If you want to know more about &lt;code&gt;git&lt;/code&gt; I recommend the following &lt;a href="http://rogerdudler.github.com/git-guide/&amp;quot;%20target=&amp;quot;_self"&gt;cheatsheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, if we want to create a local repository (although it doesn't matter, it could be an existing one), we will write the following commands:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkdir webapp&lt;/p&gt;
&lt;p&gt;$ cd webapp&lt;/p&gt;
&lt;p&gt;$ git init&lt;/p&gt;
&lt;p&gt;Initialized empty Git repository in /home/user/webapp/.git/&lt;/p&gt;
&lt;p&gt;$ touch index.html&lt;/p&gt;
&lt;p&gt;$ git add index.html&lt;/p&gt;
&lt;p&gt;$ git commit -m "First commit"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The bare and non-bare differentiation&lt;/h2&gt;
&lt;p&gt;Now we have a local &lt;code&gt;git&lt;/code&gt; repository, but... What about the server? I'll try to be as generic as possible regarding the creation of the repository. In addition, I have to highlight the difference in &lt;code&gt;git&lt;/code&gt; between bare repositories and non-bare repositories.&lt;/p&gt;
&lt;p&gt;The bare repositories only have version control files and not work files (tree), also they don't include the special directory .git. Instead, it includes all of its content directly in the root of the bare repository. They are used to have a central repository where the developers can do pull and push: it is a correct way of doing this.&lt;/p&gt;
&lt;p&gt;The non-bare repositories have a special folder &lt;code&gt;.git&lt;/code&gt; which has the control version system information, and the work files: the tree. The local repository which we have created is non-bare.&lt;/p&gt;
&lt;h2&gt;Working in the server&lt;/h2&gt;
&lt;p&gt;Therefore, the idea is to create a bare repository in the server, such that when it receives a push, it will upgrade the web app directory (the folder that we want, for instance, avoiding the change of other management folders, such as the one which contains apache server scripts). This repository will be a mirror from the local one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkdir webapp.git&lt;/p&gt;
&lt;p&gt;$ cd webapp.git&lt;/p&gt;
&lt;p&gt;$ git init --bare&lt;/p&gt;
&lt;p&gt;Initialized empty Git repository in /home/user/webapp.git/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The post-hook creation&lt;/h2&gt;
&lt;p&gt;We need to tell &lt;code&gt;git&lt;/code&gt; to apply the changes in the desired folder, so we must define a post-hook who will apply the changes when the remote repository receives a push, doing a check-out of the last tree in the desired folder. Editing the post-receive file (in the &amp;quot;hook&amp;quot; folder from the bare repository) will do the trick:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GIT_WORK_TREE=/home/user/target_dir git checkout -f&lt;/p&gt;
&lt;p&gt;GIT_WORK_TREE=/home/user/target_dir git reset --hard&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If it was a Django project, we would have defined the project folder (the one with settings.py in it). Otherwise it could have been the &lt;code&gt;/var/www/example_webapp&lt;/code&gt; folder, etc. We have to give execute permissions to the post-receive file (for example with the command &lt;code&gt;chmod +x hooks/post-receive&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Finishing the local set up&lt;/h2&gt;
&lt;p&gt;Back in the local repository, it will be necessary to define the remote repository name (the mirror) and create a master branch in it. For example, we will call the branch &amp;quot;web&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git remote add web username@domain.com:webapp.git&lt;/p&gt;
&lt;p&gt;git push web +master:refs/heads/master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will have the &lt;code&gt;index.html&lt;/code&gt; dummy file in the desired server folder. From now on, changes are made with the following command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git push web&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The small inconvenience of setting up this, is worth the time.&lt;/p&gt;</summary><category term="git"></category><category term="deployment"></category><category term="version-control"></category></entry></feed>