<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The soft jaguar</title><link href="http://thesoftjaguar.com/" rel="alternate"></link><link href="http://thesoftjaguar.com/feeds/markdown.atom.xml" rel="self"></link><id>http://thesoftjaguar.com/</id><updated>2013-04-06T02:24:00+02:00</updated><entry><title>Migrating to a Pelican static blog</title><link href="http://thesoftjaguar.com/posts/2013/04/06/pelican-static-blog/" rel="alternate"></link><updated>2013-04-06T02:24:00+02:00</updated><author><name>Dario Blanco</name></author><id>tag:thesoftjaguar.com,2013-04-06:posts/2013/04/06/pelican-static-blog/</id><summary type="html">&lt;p&gt;In October 2011, as a Django training exercise, I decided to develop a blog engine from scratch, and I called it &lt;a href="https://github.com/sharkerz/blogjaguar"&gt;blogjaguar&lt;/a&gt;. It was quite interesting and I had a lot of fun in the process, but it wasn't easy and updating it required a lot of time, even if the web framework was making the things easier. That's why I have decided to drop its support, and migrate to a static blog, integrating it with a basic bootstrap webpage that I had for my personal portfolio.&lt;/p&gt;
&lt;h2&gt;The static blog concept&lt;/h2&gt;
&lt;p&gt;Instead of having a server side application which is going to parse the client request given by the web server, compile a template based on the given data (this step can be avoided sometimes with a cache system), and return it as an HTML page, we simply skip the first two steps, serving the static HTML page directly, without any programming language as a proxy.&lt;/p&gt;
&lt;p&gt;And there are many questions... How? We don't really need an admin interface for writing a blog post: we can do it directly creating another HTML page. We don't need our own comment system, we can include an external one like &lt;em&gt;Disqus&lt;/em&gt;. We don't need to register users in our page, they don't want to register in a blog. There are many tasks that we can do without creating the HTML pages dynamically.&lt;/p&gt;
&lt;p&gt;Fine, now you are thinking that this is a mess, why should you be editting the HTML pages every time you want to create a new blog entry? It seems easier with an administration panel and a WYSWYG editor. And that's why we have static blog generators. &lt;/p&gt;
&lt;h2&gt;The static blog generator&lt;/h2&gt;
&lt;p&gt;There are many static blog generators, and they provide a really interesting set of features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Speed.&lt;/strong&gt; The parse is made once locally, and then the static pages are uploaded to the web root, ready to be served.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portability.&lt;/strong&gt; Your source blog pages are going to be written in a markup language like Markdown, Textile or Restructured Text, so we don't care about the design, and can be reused in other static blog engines, or even in other systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security.&lt;/strong&gt; It is the strongest point, everything is static, no server side code, no headaches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configurability.&lt;/strong&gt; They usually have a configuration file, and you can create your own themes in a really easy way, using different template languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Power.&lt;/strong&gt; &lt;em&gt;Git&lt;/em&gt; power can be applied to the static blogs, tracking the changes in each blog post and using post-hooks for deploying both in &lt;em&gt;github&lt;/em&gt; or in another web server. Forget about WYSWYG and complex admin interfaces: just use markup language, your favorite text editor and your preferred version control system, and you will be happy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cheap.&lt;/strong&gt; You actually don't need expensive hosting, you can upload your static content to &lt;em&gt;github&lt;/em&gt; and it will serve it for you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Maybe the most famous static blog generator is &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt; (Ruby), but I have enough Ruby when I program with Chef, so I wanted a Python alternative. I tried two: &lt;a href="http://nikola.ralsina.com.ar/"&gt;Nikola&lt;/a&gt; and &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My colleague &lt;a href="http://ventolin.org/"&gt;Aengus Walton&lt;/a&gt; has been migrating his Wordpress blog to a static blog philosophy, and for that purpose he recommends Nikola over Pelican, it seems that Nikola handles Wordpress in a better way. I have to say that Nikola is a great alternative, but in my specific case, I decided to use Pelican for this purpose.&lt;/p&gt;
&lt;h2&gt;Why Pelican&lt;/h2&gt;
&lt;p&gt;With Nikola I had some issues when customizing the blog, so instead of trying to figure out what was going on, I decided to try Pelican.&lt;/p&gt;
&lt;p&gt;For me Pelican has everything that I need: comments with Disqus, themes using Jinja2, syntax hightlighting, feeds, Twitter and Google Analytics integration, and publication of articles in multiple languages.&lt;/p&gt;
&lt;p&gt;Actually this last point was one of the reasons why I tried Pelican: I thought that it wasn't supporting multilanguage (Nikola does). I didn't have any problem with Pelican in the process, and everything was astonishingly easy, so I didn't consider any other alternative after such a nice experience.&lt;/p&gt;
&lt;h2&gt;The process&lt;/h2&gt;
&lt;h3&gt;Initializiting the project&lt;/h3&gt;
&lt;p&gt;I always recommend using &lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;virtualenvwrapper&lt;/code&gt;, and then install the required &lt;code&gt;pip&lt;/code&gt; packages inside the virtual environment. In this case I am using &lt;code&gt;markdown&lt;/code&gt; as a markup format for my blog post, so I am installing it as well:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv my-pelican-blog -a ~/my-pelican-blog-project-folder
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install -r pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have set up your virtual environment, the cool part begins. Just run the &lt;code&gt;pelican-quickstart&lt;/code&gt; command, and answer each question:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's going to create the project layout, putting each blogpost markdown file in the &lt;code&gt;content&lt;/code&gt; folder. Running the following command will generate the static HTML files with Pelican's simple theme:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And well, of course you want to check how the blog is looking like:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Defining Pelican settings&lt;/h3&gt;
&lt;p&gt;Now you will see two new files, &lt;code&gt;pelicanconf.py&lt;/code&gt; and &lt;code&gt;publishconf.py&lt;/code&gt;. They are settings files, filled with the answers that you gave running &lt;code&gt;pelican-quickstart&lt;/code&gt;. In my specific case, I tuned them up a bit, for matching my personal requirements.&lt;/p&gt;
&lt;p&gt;First of all, I wanted to set &lt;em&gt;DISQUS&lt;/em&gt; as external comment system:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;thesoftjaguar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also wanted to arrange the post urls by date, for handling &lt;code&gt;archives&lt;/code&gt; later:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Urls&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;YEAR_ARCHIVE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MONTH_ARCHIVE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I activated the feeds for all the posts, categories and tags:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Feeds&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/all.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/all.rss.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.rss.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.rss.xml&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also had some static pages that were not going to be generated by Pelican, so it has to know that we want to parse them as well:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;TEMPLATE_PAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;projects.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;projects.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, I decided to implement my own theme, using &lt;em&gt;Twitter Bootstrap&lt;/em&gt;. Pelican will check in different places for a folder match, and then it will parse the content from that theme folder:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bootstrap-theme&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creating your own theme&lt;/h3&gt;
&lt;p&gt;If you want some extra customization (like I do), you will create your own theme. &lt;a href="https://github.com/getpelican/pelican/tree/master/pelican/themes"&gt;Pelican themes&lt;/a&gt; are quite cool, but I already had a really basic page using &lt;em&gt;Twitter bootstrap&lt;/em&gt; and I wanted to adapt my old Django blog to that style.&lt;/p&gt;
&lt;p&gt;A way of doing this, is to create a folder with your theme name, as it is defined in the &lt;code&gt;THEME&lt;/code&gt; setting parameter. In my case I called my theme &lt;code&gt;bootstrap-theme&lt;/code&gt;, with two other folders: &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;templates&lt;/code&gt;. Pelican is requiring a specific &lt;a href="http://docs.getpelican.com/en/3.1.1/themes.html#structure"&gt;folder structure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I copied &lt;a href="https://github.com/getpelican/pelican/tree/master/pelican/themes/simple/templates"&gt;simple theme&lt;/a&gt; template files into my &lt;code&gt;templates&lt;/code&gt; folder, and I editted them. In addition, there is a cool feature in Pelican 3: if it doesn't find a required template file, it will inherit it from the &lt;code&gt;simple&lt;/code&gt; theme, so you don't need to store uneditted simple theme files in your custom theme.&lt;/p&gt;
&lt;p&gt;Now, you are on your own. You should keep in mind that there are several &lt;a href="http://docs.getpelican.com/en/3.1.1/themes.html#templates-and-variables"&gt;template variables&lt;/a&gt; that you have to use, but that's it.&lt;/p&gt;
&lt;p&gt;However, I found several problems when I wanted to display the blog archives by year and month, and Pelican's documentation is not really clear about that subject. Using Jinja2 &lt;code&gt;groupby&lt;/code&gt; filter was my way of solving the problem:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;lt;h1 class=&amp;quot;page-title&amp;quot;&amp;gt;Archive&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;year_articles&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;groupby&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date.year&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;li&amp;gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;year&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/h2&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;month&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;month_articles&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;year_articles&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;groupby&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date.month&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;li&amp;gt;&amp;lt;h4&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;month_articles&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;.date.strftime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%B&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/h4&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;month_articles&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;div class=&amp;quot;entry-archive&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;lt;div class=&amp;quot;date&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.date.strftime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%A %d&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;lt;div class=&amp;quot;detail&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                    &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; rel=&amp;quot;bookmark&amp;quot; title=&amp;quot;Permalink to &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.title&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;striptags&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Writing your first article&lt;/h3&gt;
&lt;p&gt;Just create a &lt;code&gt;.md&lt;/code&gt; file in the &lt;code&gt;content&lt;/code&gt; folder, and write the metadata, followed by the actual Markdown formatted text:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Title: Migrating to a Pelican static blog
Date: 2013-04-06 02:24
Tags: static-blog, markdown, pelican, python, web-development, git, django
Category: programming
Slug: pelican-static-blog
Summary: How did I migrate my Django blog to a static one, using Pelican.

This is the content of my blog post. I should use Markdown here.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the file, run &lt;code&gt;make html&lt;/code&gt;, and that's it.&lt;/p&gt;
&lt;h3&gt;Deploying to your web server&lt;/h3&gt;
&lt;p&gt;I have my Pelican project, &lt;a href="https://github.com/sharkerz/thesoftjaguar"&gt;thesoftjaguar&lt;/a&gt;, on Github. However, I don't intend to serve the static files there, because I already have a personal web server.&lt;/p&gt;
&lt;p&gt;I am using a git post-hook to my personal web server, as explained in &lt;a href="http://thesoftjaguar.com/posts/2012/02/29/deploying-applications-with-git/"&gt;Deploying applications with git&lt;/a&gt;, so I have two remotes in my &lt;code&gt;thesoftjaguar&lt;/code&gt; repository: github and my personal server. But the &lt;code&gt;post-receive&lt;/code&gt; hook is going to be a bit different, because I only want to serve the &lt;code&gt;output&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;TMP_GIT_REPO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/dario/git/tmp/thesoftjaguar
&lt;span class="nv"&gt;WEB_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/dario/www

&lt;span class="nv"&gt;GIT_WORK_TREE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$TMP_GIT_REPO&lt;/span&gt; git checkout -f
&lt;span class="nv"&gt;GIT_WORK_TREE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$TMP_GIT_REPO&lt;/span&gt; git reset --hard
rm -rf &lt;span class="s2"&gt;&amp;quot;$WEB_ROOT/*&amp;quot;&lt;/span&gt;
cp -r &lt;span class="s2"&gt;&amp;quot;$TMP_GIT_REPO/thesoftjaguar/output/*&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$WEB_ROOT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now we add the new remote:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add web dario@darioblanco.com:git/thesoftjaguar.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For now on, the deployment is totally independent from the github repo, and is going to be extremely comfortable:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push web master
&lt;/pre&gt;&lt;/div&gt;</summary><category term="static-blog"></category><category term="markdown"></category><category term="pelican"></category><category term="python"></category><category term="web-development"></category><category term="git"></category><category term="django"></category></entry></feed>